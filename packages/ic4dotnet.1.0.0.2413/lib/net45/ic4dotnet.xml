<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ic4dotnet</name>
    </assembly>
    <members>
        <member name="T:ic4.IBufferAllocator">
            <summary>
                Interface of a buffer allocator, customizing the allocation of the memory used by <see cref="T:ic4.ImageBuffer"/> objects.
            </summary>
            <remarks>
                Objects of classes implementing this interface can be passed into multiple library functions:
                <list type="bullet">
                    <item>
                        When creating a <see cref="T:ic4.BufferPool"/>:
                        <list type="bullet">
                            <item>
                                <see cref="M:ic4.BufferPool.#ctor(System.UInt64,System.Nullable{System.UInt64},ic4.IBufferAllocator)"/>
                            </item>
                        </list>
                    </item>
                    <item>
                        When creating a <see cref="T:ic4.SnapSink"/>
                        <list type="bullet">
                            <item>
                                <see cref="M:ic4.SnapSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.SnapSinkAllocationStrategy,ic4.IBufferAllocator)"/>
                            </item>
                        </list>
                    </item>
                    <item>
                        When creating a <see cref="T:ic4.QueueSink"/>
                        <list type="bullet">
                            <item>
                                <see cref="M:ic4.QueueSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.IBufferAllocator,System.Int32)"/>
                            </item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.IBufferAllocator.Allocate(System.UInt64,System.UInt64,System.IntPtr@,System.Object@)">
            <summary>
                Allocates the requested number of bytes of memory for an image buffer.
            </summary>
            <param name="bufferSize">The size of the memory buffer</param>
            <param name="alignment">Requested alignment for the allocation.</param>
            <param name="buffer">
                Output parameter receiving the memory address, filled by the function.
                <para>
                    The memory address must be evenly divisible by alignment.
                </para>
            </param>
            <param name="tag">
                Output parameter receiving the reference to an <see cref="T:System.Object"/> that is stored as part of the
                image buffer and passed to <see cref="M:ic4.IBufferAllocator.Free(System.IntPtr,System.Object)"/> when the memory is to be released.
            </param>
            <returns>
                <c>true</c>, if the allocation was performed successfully, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ic4.IBufferAllocator.Free(System.IntPtr,System.Object)">
            <summary>
                Frees a memory block that was previously allocated by a successful call of <see cref="M:ic4.IBufferAllocator.Allocate(System.UInt64,System.UInt64,System.IntPtr@,System.Object@)"/>.
            </summary>
            <param name="buffer">The memory address of the allocated buffer</param>
            <param name="tag">
                The <see cref="T:System.Object"/> that was returned through the <c>tag</c> parameter in the call of the allocation call.
            </param>
        </member>
        <member name="T:ic4.BufferPool">
            <summary>
                The buffer pool allows allocating additional buffers for use by the program.
            </summary>
            <remarks>
                <para>
                    Most programs will only use buffers provided by one of the sink types.
                    However, some programs require additional buffers, for example to use as destination for image processing.
                </para>
                <para>
                    To create additional buffers, first create a buffer pool by calling the constructor <see cref="M:ic4.BufferPool.#ctor(System.UInt64,System.Nullable{System.UInt64},ic4.IBufferAllocator)"/>.
                    Then, use <see cref="M:ic4.BufferPool.GetBuffer(ic4.ImageType,System.UInt32,System.Int32,System.UInt64)"/> to request a new buffer with a specified image type.
                    Allocation options can be specified to customize the image buffer's memory alignment, pitch and total buffer size.
                </para>
                <para>
                    When an image buffer is no longer required, call <see cref="M:ic4.HandleObject.Dispose"/> on it.
                    The image buffer will then be returned to the buffer pool.
                </para>
                <para>
                    The buffer pool has configurable caching behavior. By default, the buffer pool will cache one image buffer and
                    return it the next time a matching image buffer is requested.
                </para>
                <para>
                    Image buffers objects created by the buffer pool are still valid after the buffer pool itself has been disposed.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.BufferPool.#ctor(System.UInt64,System.Nullable{System.UInt64},ic4.IBufferAllocator)">
            <summary>
                Create a new buffer pool, optionally specifying a caching behavior and a custom allocator.
            </summary>
            <param name="cacheFramesMax">
                Maximum number of frames to keep in the buffer pool's cache
            </param>
            <param name="cacheBytesMax">
                Maximum size of the buffer pool cache in bytes, or <c>null</c> to not limit by size
            </param>
            <param name="customAllocator">
                The custom allocator to be used by the new buffer pool, or <c>null</c> to use the default allocator.
            </param>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.BufferPool.GetBuffer(ic4.ImageType,System.UInt32,System.Int32,System.UInt64)">
            <summary>
                Requests a buffer from the buffer pool.
            </summary>
            <remarks>
                The buffer is either newly allocated, or retrieved from the buffer pool's buffer cache.
            </remarks>
            <param name="imageType">
                Image type of the requested buffer.
            </param>
            <param name="alignment">
                <para>
                    Specifies the alignment of the address of the buffer's memory.
                </para>
                <para>
                    Setting this to <c>0</c> lets the buffer pool select an alignment automatically.
                </para>
                <para>
                    The alignment must be a power of 2.
                </para>
            </param>
            <param name="pitch">
                <para>
                    Specifies the pitch to use when allocating the buffer.
                </para>
                <para>
                    A value of <c>0</c> lets the buffer pool select a pitch automatically.
                </para>
                <para>
                    Setting a pitch that is smaller than the amount of memory required to store one line of image data will lead to an error.
                </para>
            </param>
            <param name="bufferSize">
                <para>
                    Overrides the automatic buffer size calculation.
                </para>
                <para>
                    A value of 0 lets the buffer pool calculate the required buffer size automatically.
                </para>
                <para>
                    Setting a size that is smaller than the amount of memory required to store an image of a known format will lead to an error.
                </para>
            </param>
            <returns>The new image buffer</returns>
            <exception cref="T:System.ArgumentNullException">
                <c>imageType</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.DeviceEnum">
            <summary>
                Device enumerator.
            </summary>
            <remarks>
                <para>
                    To query the devices attached to or the interfaces of the system, use the static properties <see cref="P:ic4.DeviceEnum.Devices"/> and <see cref="P:ic4.DeviceEnum.Interfaces"/>.
                </para>
                <para>
                    Device enumerator instances are only useful to register an event handler listening for changes to the detected device list
                    by subscribing to the <see cref="E:ic4.DeviceEnum.DeviceListChanged"/> event.
                </para>
            </remarks>
        </member>
        <member name="E:ic4.DeviceEnum.DeviceListChanged">
            <summary>
                Occurs when a new device has been detected, or a device was detached.
            </summary>
        </member>
        <member name="M:ic4.DeviceEnum.#ctor">
            <summary>
                Creates a new device enumerator.
            </summary>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.DeviceEnum.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:ic4.DeviceEnum.Devices">
            <summary>
                Enumerates the devices currently attached to the system.
            </summary>
            <value>
                A list of <see cref="T:ic4.DeviceInfo" /> objects representing all video capture devices.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.DeviceEnum.Interfaces">
            <summary>
                <para>
                    Enumerates the interfaces present in the system.
                </para>
                <para>
                    Interfaces represent physical connections for cameras to the computer, e.g. network adapters or USB controllers.
                </para>
            </summary>
            <value>
                A list of <see cref="T:ic4.DeviceInfo" /> objects representing the interfaces present in the system.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.DeviceInfo">
            <summary>
                Contains information about a video capture device.
            </summary>
            <remarks>
                <c>DeviceInfo</c> objects are created by the library in multiple ways:
                <list type="bullet">
                    <item>When enumerating the available devices using <see cref="P:ic4.DeviceEnum.Devices"/>.</item>
                    <item>When enumerating the available devices on a specific interface using <see cref="P:ic4.Interface.Devices"/>.</item>
                    <item>By querying a grabber for information about its currently opened video capture using <see cref="P:ic4.Grabber.DeviceInfo"/>.</item>
                </list> 
            </remarks>
        </member>
        <member name="M:ic4.DeviceInfo.Equals(System.Object)">
            <summary>
                Check whether two device information objects refer to the same video capture device.
            </summary>
            <param name="obj">A second device information object</param>
            <returns>
                <c>true</c> if this device information refers to the same device as <c>obj</c>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ic4.DeviceInfo.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ic4.DeviceInfo.Equals(ic4.DeviceInfo)">
            <summary>
                Check whether two device information objects refer to the same video capture device.
            </summary>
            <param name="other">A second device information object</param>
            <returns>
                <c>true</c> if this device information refers to the same device as <c>other</c>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:ic4.DeviceInfo.ModelName">
            <summary>
                The model name for this device.
            </summary>
            <value>
                The model name for this device.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.DeviceInfo.UniqueName">
            <summary>
                The unique name for this device.
            </summary>
            <value>
                The unique name for this device.
                <para>
                    The unique name consists of an identifier for the device driver and the device's serial number,
                    allowing devices to be uniquely identified by a single string.
                </para>
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.DeviceInfo.Serial">
            <summary>
                The serial of this device.
            </summary>
            <value>
                The serial of this device.
                <para>
                    The serial is a string uniquely identifying the device. Usually this is a number that is also printed on the device's housing.
                </para>
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.DeviceInfo.Version">
            <summary>
                The version of this device.
            </summary>
            <value>
                The version of this device.
                <para>
                    The format of the version string is device-specific.
                </para>
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.DeviceInfo.UserID">
            <summary>
                The user-defined identifier of this device.
            </summary>
            <value>
                The user-defined identifier of this device.
                <para>
                    If supported by the device, the device's user-defined identifier can be configured through the <c>DeviceUserID</c> feature
                    in the device's property map.
                </para>
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.DeviceInfo.Interface">
            <summary>
                The interface this device is attached to.
            </summary>
            <value>
                The interface this device is attached to.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.Display">
            <summary>
                Abstract base class for display implementations
            </summary>
        </member>
        <member name="P:ic4.Display.InternalHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:ic4.Display.DisplayBuffer(ic4.ImageBuffer)">
            <inheritdoc cref="M:ic4.IDisplay.DisplayBuffer(ic4.ImageBuffer)"/>
        </member>
        <member name="E:ic4.Display.WindowClosed">
            <summary>
                Occurs when the display window is closed.
            </summary>
        </member>
        <member name="M:ic4.Display.OnWindowClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ic4.Display.Statistics">
            <inheritdoc cref="P:ic4.IDisplay.Statistics"/>
        </member>
        <member name="P:ic4.Display.RenderPosition">
            <inheritdoc cref="P:ic4.IDisplay.RenderPosition"/>
        </member>
        <member name="P:ic4.Display.RenderLeft">
            <inheritdoc cref="P:ic4.IDisplay.RenderLeft"/>
        </member>
        <member name="P:ic4.Display.RenderTop">
            <inheritdoc cref="P:ic4.IDisplay.RenderTop"/>
        </member>
        <member name="P:ic4.Display.RenderWidth">
            <inheritdoc cref="P:ic4.IDisplay.RenderWidth"/>
        </member>
        <member name="P:ic4.Display.RenderHeight">
            <inheritdoc cref="P:ic4.IDisplay.RenderHeight"/>
        </member>
        <member name="T:ic4.DisplayStatistics">
            <summary>
                A class containing display statistics
            </summary>
            <remarks>
                <para>
                    This class contains information about the number of frames that were
                    displayed or dropped by a display.
                </para>
                <para>
                    Use the <see cref="P:ic4.IDisplay.Statistics"/> property on a display to request display statistics.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.DisplayStatistics.NumFramesDisplayed">
            <summary>
                The number of frames that were displayed by a display
            </summary>
            <value>
                The number of frames that were displayed by a display
            </value>
        </member>
        <member name="P:ic4.DisplayStatistics.NumFramesDropped">
            <summary>
                The number of frames that were passed to a display, but not displayed
            </summary>
            <value>
                The number of frames that were passed to a display, but not displayed.
                <para>
                    A frame is considered dropped by a display, when the display receives a new frame
                    before the previous frame was rendered.
                </para>
            </value>
        </member>
        <member name="T:ic4.DisplayType">
            <summary>
                Defines the possible display implementations
            </summary>
        </member>
        <member name="F:ic4.DisplayType.Default">
            <summary>
                Selects the platform's default display type.
                <para>
                    For Windows, this selects <see cref="F:ic4.DisplayType.Win32OpenGL"/>.
                </para>
                <para>
                    For Linux, this selects <see cref="F:ic4.DisplayType.LinuxGStreamer"/>.
                </para>
            </summary>
        </member>
        <member name="F:ic4.DisplayType.Win32OpenGL">
            <summary>
                Optimized OpenGL display for Windows platform
            </summary>
        </member>
        <member name="F:ic4.DisplayType.LinuxGStreamer">
            <summary>
                Simple GStreamer-based display for Linux platforms
            </summary>
        </member>
        <member name="T:ic4.DisplayRenderPosition">
            <summary>
                Specifies the possible display alignment and stretch modes.
            </summary>
        </member>
        <member name="F:ic4.DisplayRenderPosition.TopLeft">
            <summary>
                Display images unscaled at the top left corner of the window
            </summary>
        </member>
        <member name="F:ic4.DisplayRenderPosition.Center">
            <summary>
                Display images unscaled an the center of the window
            </summary>
        </member>
        <member name="F:ic4.DisplayRenderPosition.StretchTopLeft">
            <summary>
                Display images stretched at the top left corner of the window
            </summary>
        </member>
        <member name="F:ic4.DisplayRenderPosition.StretchCenter">
            <summary>
                Display images stretched at the center of the window
            </summary>
        </member>
        <member name="F:ic4.DisplayRenderPosition.Custom">
            <summary>
                Display images at custom coordinates defined by the display's <see cref="P:ic4.IDisplay.RenderLeft"/>,
                <see cref="P:ic4.IDisplay.RenderTop"/>, <see cref="P:ic4.IDisplay.RenderWidth"/> and <see cref="P:ic4.IDisplay.RenderHeight"/>
                properties.
            </summary>
        </member>
        <member name="T:ic4.EmbeddedDisplay">
            <summary>
                A display that is embedded inside a parent window
            </summary>
        </member>
        <member name="M:ic4.EmbeddedDisplay.#ctor(System.IntPtr,ic4.DisplayType)">
            <summary>
                Creates a display embedded inside a parent window
            </summary>
            <param name="parentWindow">
                Window handle of the parent window
            </param>
            <param name="displayType">
                Type of display to use
            </param>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.ErrorCode">
            <summary>
                Defines the error codes identifying errors occuring in the library.
            </summary>
            <remarks>
                The error code of a <see cref="T:ic4.IC4Exception"/> is provided by its <see cref="P:ic4.IC4Exception.ErrorCode"/> property.
            </remarks>
        </member>
        <member name="F:ic4.ErrorCode.NoError">
            <summary>
                No error occurred, the operation was successful.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.Unknown">
            <summary>
                An unknown error occurred.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.Internal">
            <summary>
                An internal error (bug) occurred.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.OutOfMemory">
            <summary>
                Out of memory.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.LibraryNotInitialized">
            <summary>
                InitLibrary has not been not called.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.DriverError">
            <summary>
                Device driver behaved unexpectedly.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.InvalidParamVal">
            <summary>
                An invalid parameter was passed in.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.ConversionNotSupported">
            <summary>
                The operation would require an image format conversion that is not supported.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.NoData">
            <summary>
                The requested data is not available.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamFeatureNotFound">
            <summary>
                No matching GenICam feature found.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamDeviceError">
            <summary>
                Error occured writing to device.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamTypeMismatch">
            <summary>
                Attempted an operation on the wrong node type, e.g. command_execute on an integer.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamAccessDenied">
            <summary>
                Tried to access a camera feature that is currently not accessible.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamNotImplemented">
            <summary>
                Tried to access a feature that is not implemented by the current camera.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamValueError">
            <summary>
                Tried to set an invalid value, e.g. out of range.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.GenICamChunkDataNotConnected">
            <summary>
                Tried to read a value that is only available if chunk data is connected to the property map.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.BufferTooSmall">
            <summary>
                A supplied buffer was too small to receive all available data.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.SnapAborted">
            <summary>
                A snap operation was not completed, because the camera was stopped before all requested frames could be captured.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.FileFailedToWriteData">
            <summary>
                Failed to write data to a file.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.FileAccessDenied">
            <summary>
                Failed to write to a file, because the location was not writable.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.FilePathNotFound">
            <summary>
                Failed to write to a file, because the path was invalid.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.FileFailedToReadData">
            <summary>
                Failed to read data from a file.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.DeviceInvalid">
            <summary>
                The device has become invalid (e. g. it was unplugged).
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.DeviceNotFound">
            <summary>
                The device was not found.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.DeviceError">
            <summary>
                The device behaved unexpectedly.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.Ambiguous">
            <summary>
                The parameter did not uniquely identify an item.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.ParseError">
            <summary>
                There was an error parsing the parameter or file.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.Timeout">
            <summary>
                The requested operation could not be completed before the timeout expired.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.Incomplete">
            <summary>
                The operation was only partially successful, e.g. not all properties of the grabber could be restored.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.SinkNotConnected">
            <summary>
                Sink is not yet connected.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.ImageTypeMismatch">
            <summary>
                The passed buffer does not have the expected ImageType.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.SinkAlreadyAttached">
            <summary>
                The sink passed in is already attached to another grabber.
            </summary>
        </member>
        <member name="F:ic4.ErrorCode.SinkConnectAborted">
            <summary>
                The sink's connect handler signaled an error.
            </summary>
        </member>
        <member name="T:ic4.IC4Exception">
            <summary>
                Exception type thrown for library-specific error conditions.
            </summary>
            <remarks>
                <para>
                    The <see cref="P:ic4.IC4Exception.ErrorCode"/> property provides error information through an <see cref="T:ic4.ErrorCode"/> value.
                </para>
                <para>
                    Call <see cref="M:System.Exception.ToString"/> to query additional error information.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.IC4Exception.ErrorCode">
            <summary>
                The error code identifying the error condition.
            </summary>
        </member>
        <member name="M:ic4.IC4Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ic4.IC4Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:ic4.FloatingDisplay">
            <summary>
                A display that is using its own top-level window.
            </summary>
            <remarks>
                <para>
                    The main use case for this display type are test and demo applications.
                </para>
                <para>
                    The display's window has its own window thread, therefore also works in console applications.
                </para>
                <para>
                    Use the <see cref="E:ic4.Display.WindowClosed"/> event to get a notification when the display's window was closed.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.FloatingDisplay.#ctor(ic4.DisplayType)">
            <summary>
                Create a new display using its own top-level window.
            </summary>
            <param name="displayType">
                Type of display to use
            </param>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.FrameMetaData">
            <summary>
                A class containing frame metadata, such as frame ID and time stamp.
            </summary>
            <remarks>
                To query the frame metadata of an <see cref="T:ic4.ImageBuffer"/>, use the <see cref="P:ic4.ImageBuffer.MetaData"/> property.
            </remarks>
        </member>
        <member name="P:ic4.FrameMetaData.DeviceFrameNumber">
            <summary>
                The frame number assigned to the image by the video capture device
            </summary>
            <value>
                <para>
                    The frame number assigned to the image by the video capture device.
                </para>
                <para>
                    The behavior of this value, including starting value and possible rollover is device-specific.
                </para>
            </value>
        </member>
        <member name="P:ic4.FrameMetaData.DeviceTimestampNs">
            <summary>
                The time stamp assigned to the image by the video capture device
            </summary>
            <value>
                <para>
                    The time stamp assigned to the image by the video capture device.
                </para>
                <para>
                    The behavior of this value, including possible resets, its starting value or actual resolution is device-specific.
                </para>
            </value>
        </member>
        <member name="T:ic4.StreamSetupOption">
            <summary>
                Specifies whether <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/> or one of its overloads
                should enable acquisition after the data stream was set up successfully.
            </summary>
        </member>
        <member name="F:ic4.StreamSetupOption.AcquisitionStart">
            <summary>
                Start aquisition after the stream was set up.
            </summary>
            <remarks>
                This is equivalent to manually calling <see cref="M:ic4.Grabber.AcquisitionStart"/> after the data stream
                was established.
            </remarks>
        </member>
        <member name="F:ic4.StreamSetupOption.DeferAcquisitionStart">
            <summary>
                Do not start acquisition.
            </summary>
            <remarks>
                To acquire images, <see cref="M:ic4.Grabber.AcquisitionStart"/> must be called at a later time.
            </remarks>
        </member>
        <member name="T:ic4.Grabber">
            <summary>
                Represents an opened video capture device, allowing device configuration and stream setup.
            </summary>
            <remarks>
                <para>
                    The grabber object is the core component used when working with video capture devices.
                </para>
                <para>
                    Grabber objects are created using the constructor <see cref="M:ic4.Grabber.#ctor"/>.
                </para>
                <para>
                    After creation, the most common operation on a grabber is to open a device.
                    A device can be opened directly by
                    <list type="bullet">
                        <item>passing string identifying a device to <see cref="M:ic4.Grabber.DeviceOpen(System.String)"/></item>
                        <item>passing a <see cref="P:ic4.Grabber.DeviceInfo"/> object to <see cref="M:ic4.Grabber.DeviceOpen(ic4.DeviceInfo)"/></item>
                    </list>
                    A device can also be selected and configured from a previously saved device state by
                    <list type="bullet">
                        <item>passing the file name of a device state file to <see cref="M:ic4.Grabber.DeviceOpenFromState(System.String)"/></item>
                        <item>passing a byte array contains device state data to <see cref="M:ic4.Grabber.DeviceOpenFromState(System.Byte[])"/></item>
                        <item>passing a <see cref="T:System.IO.Stream"/> containing device state data to <see cref="M:ic4.Grabber.DeviceOpenFromState(System.IO.Stream)"/></item>
                    </list>
                </para>
                <para>
                    To establish a data stream from the opened video capture device, call <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/>.
                </para>
                <para>
                    A <see cref="P:ic4.Grabber.Sink"/> is required if the program needs to access, process, or store image data.
                    There are several sink types available to choose from, which are useful depending on the application, e.g. <see cref="T:ic4.QueueSink"/> or <see cref="T:ic4.SnapSink"/>.
                </para>
                <para>
                    A <see cref="T:ic4.IDisplay"/> can be used to automatically display all images from the video capture device.
                </para>
                <para>
                    After the data stream has been set up, call <see cref="M:ic4.Grabber.AcquisitionStart"/> to begin the transfer of images.
                </para>
                <para>
                    See <see href="../articles/grabber-states.md">Grabber States</see> for a discussion of the internal states of the grabber object during
                    its lifetime.
                </para>
                <para>
                    Some object references, e.g. <see cref="T:ic4.ImageBuffer"/>, can keep the device and/or driver opened as long as they exist,
                    since they point into device driver memory. To free all device-related resources, all objects references have to be released.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.#ctor">
            <summary>
                Creates a new grabber.
            </summary>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.Grabber.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ic4.Grabber.DeviceOpen(ic4.DeviceInfo)">
            <summary>
                Opens the video capture device specified by the passed device information object.
            </summary>
            <param name="deviceInfo">
                A device information object representing the video capture device to be opened
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>deviceInfo</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The grabber already has an opened device
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.Grabber.DeviceOpen(System.String)">
            <summary>
                Opens the video capture matching the specified identifier.
            </summary>
            <param name="identifier">
                The model name, unique name or serial of a connected video capture device
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>identifier</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The grabber already has an opened device
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    If there are multiple devices matching the specified model name, unique name or serial,
                    the function will fail and throw a <see cref="T:ic4.IC4Exception" /> with the error code set
                    to <see cref="F:ic4.ErrorCode.Ambiguous" />.
                </para>
                <para>
                    If there is no device with the specified model name, unique name or serial, the function will
                    fail and throw a <see cref="T:ic4.IC4Exception" /> with the error code set to <see cref="F:ic4.ErrorCode.DeviceNotFound" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.DeviceOpenFromState(System.Byte[])">
            <summary>
                Restores the opened device and its settings from a memory buffer containing data that was previously written by <see cref="M:ic4.Grabber.DeviceSaveState" />.
            </summary>
            <param name="deviceState">
                A buffer containing data that was written by <see cref="M:ic4.Grabber.DeviceSaveState" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>deviceState</c> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                A device was already opened.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    If the memory buffer contains settings for properties that could not be written, the function will fail and throw a <see cref="T:ic4.IC4Exception" /> with the error code set to <see cref="F:ic4.ErrorCode.Incomplete" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.DeviceOpenFromState(System.IO.Stream)">
            <summary>
                Restores the opened device and its settings from a <see cref="T:System.IO.Stream" /> containing device state data.
            </summary>
            <param name="strm">
                A <see cref="T:System.IO.Stream" /> containing device state data.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>strm</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                A device was already opened.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.Grabber.DeviceOpenFromState(System.String)">
            <summary>
                Restores the opened device and its settings from a file that was previously written by <see cref="M:ic4.Grabber.DeviceSaveState(System.String)" />.
            </summary>
            <param name="fileName">
                Path to a file containing device state information
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>fileName</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                A device was already opened.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.Grabber.DeviceSaveState">
            <summary>
                Saves the currently opened video capture device and all its settings into a memory buffer.
            </summary>
            <returns>
                A byte array containing the device state data
            </returns>
            <exception cref="T:System.InvalidOperationException">
                No device opened
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    To restore the device state at a later time, use <see cref="M:ic4.Grabber.DeviceOpenFromState(System.Byte[])" />.
                </para>
                <para>
                    In addition to serializing the device's properties (like <see cref="M:ic4.PropertyMap.Serialize" /> would),
                    this function also saves the currently opened video capture device so that it can be re-opened at a
                    later time with all settings restored.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.DeviceSaveState(System.String)">
            <summary>
                Saves the currently opened video capture device and all its settings into a file.
            </summary>
            <param name="fileName">
                Path to a file that the device stats is written to
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>fileName</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                No device opened
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    To restore the device state at a later time, use <see cref="M:ic4.Grabber.DeviceOpenFromState(System.String)" />.
                </para>
                <para>
                    In addition to serializing the device's properties (like <see cref="M:ic4.PropertyMap.Serialize(System.String)" /> would),
                    this function also saves the currently opened video capture device so that it can be re-opened at a
                    later time with all settings restored.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.DeviceClose">
            <summary>
                Closes the video capture device currently opened by this grabber instance
            </summary>
            <exception cref="T:System.InvalidOperationException">
                The function was called from a thread that cannot perform the operation, e.g. a device callback.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    If the device is closed, all its resouces are released:
                    <list type="bullet">
                        <item>
                            If image acquisition is active, it is stopped.
                        </item>
                        <item>
                            If a data stream was set up, it is stopped.
                        </item>
                        <item>
                            References to data stream-related objects are released, possibly destroying the sink and/or display.
                        </item>
                        <item>
                            Property objects retrieved from the <see cref="P:ic4.Grabber.DevicePropertyMap" /> become invalid.
                        </item>
                    </list>
                </para>
                <para>
                    <see cref="T:ic4.ImageBuffer" /> objects and their memory stay allocated until they are disposed.
                    References to image buffers can keep the video capture device open, if they point into driver memory.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Grabber.IsDeviceValid">
            <summary>
                Checks whether the grabber's currently opened video capture device is ready to use.
            </summary>
            <value>
                <c>true</c>, if the grabber has an opened video capture device that is ready to use, otherwise <c>false</c>.
            </value>
            <remarks>
                <para>
                    There are multiple reasons for why this function may return <c>false</c>:
                    <list type="bullet">
                        <item>No device has been opened</item>
                        <item>The device was disconnected</item>
                        <item>There is a loose hardware connection</item>
                        <item>There was an internal error in the video capture device</item>
                        <item>There was a driver error</item>
                    </list>
                </para>
                <para>
                    If the currently opened device becomes invalid, the <see cref="E:ic4.Grabber.DeviceLost"/> event is raised.
                </para>
                <para>
                    See <see href="../articles/grabber-states.md">Grabber States</see> for a discussion of the internal states of the grabber object during
                    its lifetime.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Grabber.IsDeviceOpen">
            <summary>
                Checks whether the grabber currently has an opened video capture device.
            </summary>
            <value>
                <c>true</c>, if the grabber has an opened video capture device, otherwise <c>false</c>.
            </value>
            <remarks>
                See <see href="../articles/grabber-states.md">Grabber States</see> for a discussion of the internal states of the grabber object during
                its lifetime.
            </remarks>
        </member>
        <member name="P:ic4.Grabber.Sink">
            <summary>
                Returns the sink object that was passed to <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/>
                or <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.StreamSetupOption)"/> when setting up the currently established data stream.
            </summary>
            <value>
                The current sink, or <c>null</c> if no sink was set.
            </value>
        </member>
        <member name="P:ic4.Grabber.Display">
            <summary>
                Returns the display object that was passed to <see cref="M:ic4.Grabber.StreamSetup(ic4.IDisplay,ic4.StreamSetupOption)"/> 
                or <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/> when setting up the currently established data stream.
            </summary>
            <value>
                The current display, or <c>null</c> if no display was set.
            </value>
        </member>
        <member name="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)">
            <summary>
                Establishes the data stream from the device.
            </summary>
            <param name="sink">
                A sink to receive the images
            </param>
            <param name="display">
                A display to display the images
            </param>
            <param name="setupOption">
                Specifies whether to immediately start acquisition after the data stream was set up successfully
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>sink</c> is <c>null</c> or <c>display</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The operation could not be performed. Possible reasons can be
                <list type="bullet">
                    <item>No device opened</item>
                    <item>Data stream is already active</item>
                    <item>The function was called from a thread that cannot perform the operation, e.g. a sink callback.</item>
                </list>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    A device has to be opened before calling this function.
                </para>
                <para>
                    The grabber takes references to the passed sink and display, tying their lifetime
                    to the grabber until the data stream is stopped.
                </para>
                <para>
                    To stop the data stream at a later time, call <see cref="M:ic4.Grabber.StreamStop" />
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.StreamSetupOption)">
            <summary>
                Establishes the data stream from the device.
            </summary>
            <param name="sink">
                A sink to receive the images
            </param>
            <param name="setupOption">
                Specifies whether to immediately start acquisition after the data stream was set up successfully
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>sink</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The operation could not be performed. Possible reasons can be
                <list type="bullet">
                    <item>No device opened</item>
                    <item>Data stream is already active</item>
                    <item>The function was called from a thread that cannot perform the operation, e.g. a sink callback.</item>
                </list>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    A device has to be opened before calling this function.
                </para>
                <para>
                    The grabber takes references to the passed sink, tying its lifetime
                    to the grabber until the data stream is stopped.
                </para>
                <para>
                    To stop the data stream at a later time, call <see cref="M:ic4.Grabber.StreamStop" />
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.StreamSetup(ic4.IDisplay,ic4.StreamSetupOption)">
            <summary>
                Establishes the data stream from the device.
            </summary>
            <param name="display">
                A display to display the images
            </param>
            <param name="setupOption">
                Specifies whether to immediately start acquisition after the data stream was set up successfully
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>display</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The operation could not be performed. Possible reasons can be
                <list type="bullet">
                    <item>No device opened</item>
                    <item>Data stream is already active</item>
                    <item>The function was called from a thread that cannot perform the operation, e.g. a sink callback.</item>
                </list>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    A device has to be opened before calling this function.
                </para>
                <para>
                    The grabber takes references to the passed display, tying its lifetime
                    to the grabber until the data stream is stopped.
                </para>
                <para>
                    To stop the data stream at a later time, call <see cref="M:ic4.Grabber.StreamStop" />
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.StreamStop">
            <summary>
                Stops a data stream that was previously set up by a call to <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)" />
                or one of its overloads.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                The function was called from a thread that cannot perform the operation, e.g. a sink callback.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                This function releases the sink and/or display references that were used to setup the data stream.
                If there are no additional references to the sink or display, the sink or display is destroyed.
            </remarks>
        </member>
        <member name="P:ic4.Grabber.IsStreaming">
            <summary>
                Checks whethere there is a data stream established from this grabber's video capture device.
            </summary>
            <value>
                <c>true</c>, if a data stream was previously established.
                Otherwise, or if the data stream was stopped again, <c>false</c>.
            </value>
            <remarks>
                See <see href="../articles/grabber-states.md">Grabber States</see> for a discussion of the internal states of the grabber object during
                its lifetime.
            </remarks>
        </member>
        <member name="M:ic4.Grabber.AcquisitionStart">
            <summary>
                Starts the acquisition of images from the video capture device.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                A data stream was not setup yet, or acquisition is already active
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    A data stream has to be established before calling this function by calling
                    <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)" /> or one of its overloads.
                </para>
                <para>
                    This operation is equivalent to executing the <c>AcquisitionStart</c> command
                    on the device's <see cref="T:ic4.PropertyMap" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.AcquisitionStop">
            <summary>
                Stops the acquisition of images from the video capture device.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                No device opened
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The acquisition of images has to be started, for example by calling <see cref="M:ic4.Grabber.AcquisitionStart" />
                    or passing <see cref="F:ic4.StreamSetupOption.AcquisitionStart" /> during stream setup, before calling this function.
                </para>
                <para>
                    This operation is equivalent to executing the <c>AcquisitionStop</c> command
                    on the device's <see cref="T:ic4.PropertyMap" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Grabber.IsAcquisitionActive">
            <summary>
                Checks whether image acquisition is currently enabled for this grabber's video capture device.
            </summary>
            <value>
                <c>true</c>, if image acquisition is currently active, otherwise <c>false</c>.
            </value>
            <remarks>
                <para>
                    In contrast to <see cref="P:ic4.Grabber.IsStreaming"/>, this additionally checks whether the device was instructed
                    to begin image acquisition.
                </para>
                <para>
                    See <see href="../articles/grabber-states.md">Grabber States</see> for a discussion of the internal states of the grabber object during
                    its lifetime.
                </para>
            </remarks>
        </member>
        <member name="E:ic4.Grabber.DeviceLost">
            <summary>
                Occurs then the currently opened video capture device becomes invalid.
            </summary>
            <remarks>
                There are multiple reasons for why event may happen:
                <list type="bullet">
                    <item>The device was disconnected</item>
                    <item>There is a loose hardware connection</item>
                    <item>There was an internal error in the video capture device</item>
                    <item>There was a driver error</item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.Grabber.OnDeviceLost">
            <summary>
            
            </summary>
        </member>
        <member name="P:ic4.Grabber.DevicePropertyMap">
            <summary>
                Returns the property map for the currently opened video capture device.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                No device opened
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                The property map returned from this function is the origin for all device feature manipulation operations.
            </remarks>
        </member>
        <member name="P:ic4.Grabber.DriverPropertyMap">
            <summary>
                Returns the property map for the driver of the currently opened video capture device.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                No device opened
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                The property map returned from this function is the origin for driver-related feature operations.
            </remarks>
        </member>
        <member name="P:ic4.Grabber.DeviceInfo">
            <summary>
                Returns information about the currently opened video capture device.
            </summary>
            <value>
                A <see cref="P:ic4.Grabber.DeviceInfo" /> object for the currently opened video capture device.
            </value>
            <exception cref="T:System.InvalidOperationException">
                No device opened
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.Grabber.StreamStatistics">
            <summary>
                Query statistics counters from the currently running or previously stopped data stream.
            </summary>
            <value>
                A <see cref="P:ic4.Grabber.StreamStatistics" /> object containing the stream statistics counters.
            </value>
            <exception cref="T:System.InvalidOperationException">
                A data stream has not been setup yet
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                This operation is only valid after a data stream was established once.
            </remarks>
        </member>
        <member name="T:ic4.HandleObject">
            <summary>
                Base class for objects referencing an underlying library handle.
            </summary>
            <remarks>
                <para>
                    It is recommended to call <see cref="M:ic4.HandleObject.Dispose"/> on all <see cref="T:ic4.HandleObject"/>-derived objects as soon as they are no longer required.
                </para>
                <para>
                    Trying any operation on a disposed HandleObject throws an <see cref="T:System.ObjectDisposedException"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.HandleObject.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ic4.HandleObject.Finalize">
            <summary>
                Releases the underlying library's handle, unless the object has already been disposed.
            </summary>
        </member>
        <member name="M:ic4.HandleObject.Dispose">
            <summary>
                Releases the underlying library's object handle.
            </summary>
        </member>
        <member name="T:ic4.IDisplay">
            <summary>
                Display interface
            </summary>
            <remarks>
                <para>
                    To create a display, create an instance of a class implementing <see cref="T:ic4.IDisplay"/>,
                    e.g. <see cref="T:ic4.EmbeddedDisplay"/>, <see cref="T:ic4.FloatingDisplay"/> or <see cref="T:ic4.WinForms.Display">WinForms.Display</see>.
                </para>
                <para>
                    Display objects are generally used in two distinct ways:
                    <list type="bullet">
                        <item>
                            The display is connected to a data stream when calling
                            <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/>
                            or <see cref="M:ic4.Grabber.StreamSetup(ic4.IDisplay,ic4.StreamSetupOption)"/>, automatically displaying
                            all images from the opened device.
                        </item>
                        <item>
                            <see cref="T:ic4.ImageBuffer"/> objects are displayed manually by calling <see cref="M:ic4.IDisplay.DisplayBuffer(ic4.ImageBuffer)"/>.
                        </item>
                    </list>
                </para>
                <para>
                    Some functions, such as <see cref="M:ic4.Grabber.StreamSetup(ic4.IDisplay,ic4.StreamSetupOption)"/>,
                    takes shared ownership of the display object.
                    The display is kept alive by the grabber object even if the display object was disposed.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.IDisplay.DisplayBuffer(ic4.ImageBuffer)">
            <summary>
                Displays a specific image buffer.
            </summary>
            <param name="buffer">
                The buffer to display
            </param>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                When <paramref name="buffer" /> is <c>null</c>, the display is cleared and will no longer display the previous buffer.
            </remarks>
        </member>
        <member name="P:ic4.IDisplay.Statistics">
            <summary>
                Queries display statistics.
            </summary>
            <value>
                A structure contains display statistics
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.IDisplay.RenderPosition">
            <summary>
                The scaling and alignment mode to use
            </summary>
            <value>
                The scaling and alignment mode to use
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.IDisplay.RenderLeft">
            <summary>
                The left coordinate of the target rectangle inside the display
            </summary>
            <value>
                The left coordinate of the target rectangle inside the display
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.IDisplay.RenderTop">
            <summary>
                The top coordinate of the target rectangle inside the display
            </summary>
            <value>
                The top coordinate of the target rectangle inside the display
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.IDisplay.RenderWidth">
            <summary>
                The width of the target rectangle inside the display
            </summary>
            <value>
                The width of the target rectangle inside the display
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.IDisplay.RenderHeight">
            <summary>
                The height of the target rectangle inside the display
            </summary>
            <value>
                The height of the target rectangle inside the display
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.IDisplayInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:ic4.IDisplayInternal.InternalHandle">
            <summary>
            
            </summary>
        </member>
        <member name="T:ic4.ImageBuffer">
            <summary>
                Represents an image buffer
            </summary>
            <remarks>
                <para>
                    Image buffer objects are created automatically by the various <see cref="T:ic4.Sink"/> types.
                    They can also be created manually on request by a <see cref="T:ic4.BufferPool"/>, or by calling <see cref="M:ic4.ImageBuffer.FromMemory(System.IntPtr,System.UInt64,System.Int64,ic4.ImageType,System.Action{System.IntPtr,System.UInt64})"/>.
                </para>
                <para>
                    Programs use image buffers through objects of type <see cref="T:ic4.ImageBuffer"/>.
                    If the object is disposed, the image buffer is returned to its source for reuse.
                    For example, an image buffer retrieved from <see cref="M:ic4.QueueSink.PopOutputBuffer"/> will be re-queued.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.ImageBuffer.FromMemory(System.IntPtr,System.UInt64,System.Int64,ic4.ImageType,System.Action{System.IntPtr,System.UInt64})">
            <summary>
                Creates an image buffer object using external memory as storage area for the image data.
            </summary>
            <param name="bufferPtr">
                Pointer to a region of memory to be used as image data by the image buffer object
            </param>
            <param name="bufferSize">
                Size of the region of memory pointed to by <c>data</c>
            </param>
            <param name="pitch">
                Difference between memory addresses of two consecutive lines of image data
            </param>
            <param name="imageType">
                Type of image to be stored in the image buffer
            </param>
            <param name="onRelease">
                Function to be called when the image buffer is destroyed and the image data will no longer be accessed through it.
            </param>
            <returns>
                The new image buffer object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <c>imageType</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    This function can be useful when copying image data into buffers of third-party libraries:
                    <list type="bullet">
                        <item>
                            Create an image object in the third-party library
                        </item>
                        <item>
                            Wrap the third-party library's image data into an image buffer using FromMemory.
                        </item>
                        <item>
                            Copy the data from an existing image buffer object into the third-party buffer using <see cref="M:ic4.ImageBuffer.CopyFrom(ic4.ImageBuffer,ic4.ImageBuffer.CopyOptions)" />.
                        </item>
                    </list>
                </para>
                <para>
                    The program has to make sure that the memory pointed to by <c>bufferPtr</c> stays allocated as long
                    as the image buffer object exists.
                </para>
                <para>
                    Calling <see cref="M:ic4.HandleObject.Dispose" /> on an image buffer returned by this function
                    destroys the image buffer object, but does not free the associated memory.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.ImageBuffer.Ptr">
            <summary>
                Returns a pointer to the data managed by the image buffer.
            </summary>
            <value>
                <para>
                    A pointer to the image buffer's data.
                </para>
                <para>
                    The memory pointed to by the returned pointer is valid as long as the image buffer object exists.
                </para>
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.ImageBuffer.BufferSize">
            <summary>
                Returns the size of the image buffer.
            </summary>
            <value>
                The size of the image buffer
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.ImageBuffer.Pitch">
            <summary>
                Returns the pitch for the image buffer.
            </summary>
            <value>
                <para>
                    The pitch of the image buffer.
                </para>
                <para>
                    The pitch is the distance between the starting memory location of two consecutive lines in bytes.
                </para>
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.ImageBuffer.ImageType">
            <summary>
                Queries information about the image buffers's image data type.
            </summary>
            <value>
                A <see cref="P:ic4.ImageBuffer.ImageType" /> object describing the type of image that can be stored in the image buffer.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.ImageBuffer.MetaData">
            <summary>
                Retrieves frame metadata from an image buffer object.
            </summary>
            <value>
                A <see cref="T:ic4.FrameMetaData" /> object containing the frame's metadata.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.ImageBuffer.CopyOptions">
            <summary>
                Defines options to configure the behavior of <see cref="M:ic4.ImageBuffer.CopyFrom(ic4.ImageBuffer,ic4.ImageBuffer.CopyOptions)"/>
            </summary>
        </member>
        <member name="F:ic4.ImageBuffer.CopyOptions.None">
            <summary>
                Default behavior. Copy image data, meta data and chunk data.
            </summary>
        </member>
        <member name="F:ic4.ImageBuffer.CopyOptions.SkipImage">
            <summary>
                Instructs <see cref="M:ic4.ImageBuffer.CopyFrom(ic4.ImageBuffer,ic4.ImageBuffer.CopyOptions)"/> to skip the image data when copying.
            </summary>
            <remarks>
                <para>
                    If included in the <c>flags</c> argument, <see cref="M:ic4.ImageBuffer.CopyFrom(ic4.ImageBuffer,ic4.ImageBuffer.CopyOptions)"/> only
                    copies the non-image parts of the buffer, and a program-defined algorithm can handle the image
                    copy operation.
                </para>
            </remarks>
        </member>
        <member name="F:ic4.ImageBuffer.CopyOptions.SkipChunkData">
            <summary>
                Instructs <see cref="M:ic4.ImageBuffer.CopyFrom(ic4.ImageBuffer,ic4.ImageBuffer.CopyOptions)"/> to not copy the chunk data.
            </summary>
            <remarks>
                <para>
                    This can be useful if the chunk data is large and not required in the destination frame.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.ImageBuffer.CopyFrom(ic4.ImageBuffer,ic4.ImageBuffer.CopyOptions)">
            <summary>
                Copies the contents of one image buffer to another image buffer.
            </summary>
            <param name="other">
                Source buffer to copy from
            </param>
            <param name="options">
                A bitwise combination of <see cref="T:ic4.ImageBuffer.CopyOptions" /> to customize the copy operation
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>other</c> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <c>this</c> is not writable. Check <see cref="P:ic4.ImageBuffer.IsWritable" /> for details.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    If the pixel format of the images in <c>other</c> and <c>this</c> is not equal, the image is converted.
                    For example, if the pixel format of <c>other</c> is <see cref="F:ic4.PixelFormat.BayerRG8" /> and the pixel
                    format of <c>this</c> is <see cref="F:ic4.PixelFormat.BGR8" />, a demosaicing operation creates a color image.
                </para>
                <para>
                    If <c>flags</c> contains <see cref="F:ic4.ImageBuffer.CopyOptions.SkipImage" />, the function does not copy the image data.
                    The function then only copies the chunk data and meta data, and a program-defined algorithm can handle
                    the image copy operation.
                </para>
                <para>
                    If <c>flags</c> contains <see cref="F:ic4.ImageBuffer.CopyOptions.SkipChunkData" />, the function does not copy the chunk data
                    contained in <c>other</c>. This can be useful if the chunk data is large and not required.
                </para>
                <para>
                    If the width or height of <c>other</c> and <c>this</c> are not equal, the function fails and throws an
                    <see cref="T:ic4.IC4Exception" /> with the error code set to <see cref="F:ic4.ErrorCode.ConversionNotSupported" />.
                </para>
                <para>
                    If there is no algorithm available for the requested conversion, the function fails and throws an
                    <see cref="T:ic4.IC4Exception" /> with the error code set to <see cref="F:ic4.ErrorCode.ConversionNotSupported" />.
                </para>
                <para>
                    If <c>this</c> is not writable, the function fails and throws an
                    <see cref="T:System.InvalidOperationException" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.ImageBuffer.IsWritable">
            <summary>
                Checks whether an image buffer object is (safely) writable.
            </summary>
            <value>
                <c>true</c>, if the image buffer not shared with any part of the library, and is therefore safely writable,
                otherwise <c>false</c>.
            </value>
            <remarks>
                <para>
                    In some situations, image buffer objects are shared between the application holding a handle to
                    the image buffer object and the library. For example, the image buffer might be shared with a
                    display or a video writer.
                </para>
                <para>
                    A shared buffer is not safely writable. Writing to a buffer that is shared can lead to unexpected
                    behavior, for example a modification may partially appear in the result of an operation that is
                    happening in parallel.
                </para>
                <para>
                    Passing the image buffer into a function such as <see cref="M:ic4.IDisplay.DisplayBuffer(ic4.ImageBuffer)"/>
                    or <see cref="M:ic4.VideoWriter.AddFrame(ic4.ImageBuffer)"/> can lead to a buffer becoming shared.
                </para>
            </remarks>
        </member>
        <member name="T:ic4.PngCompressionLevel">
            <summary>
                Defines the possible PNG compression levels passed to <see cref="M:ic4.ImageBufferExtensions.SaveAsPng(ic4.ImageBuffer,System.String,System.Boolean,ic4.PngCompressionLevel)"/>.
            </summary>
            <remarks>
                <para>
                    Higher compression levels can generate smaller files, but the compression can take more time.
                </para>
            </remarks>
        </member>
        <member name="F:ic4.PngCompressionLevel.Auto">
            <summary>
                Automatically select a compression level
            </summary>
        </member>
        <member name="F:ic4.PngCompressionLevel.Low">
            <summary>
                Low compression
            </summary>
        </member>
        <member name="F:ic4.PngCompressionLevel.Medium">
            <summary>
                Medium compression
            </summary>
        </member>
        <member name="F:ic4.PngCompressionLevel.High">
            <summary>
                High compression
            </summary>
        </member>
        <member name="F:ic4.PngCompressionLevel.Highest">
            <summary>
                Highest compression
            </summary>
        </member>
        <member name="T:ic4.ImageBufferExtensions">
            <summary>
                Contains extension methods for <see cref="T:ic4.ImageBuffer"/> that allow saving image buffer
                contents into files of various file formats.
            </summary>
            <example>
                <para>
                    Since the members are extension methods, they can be called both explicitly and on image buffers directly,
                    as if they were member functions.
                </para>
                <para>
                    To call it as a member function, a <c>using</c> directive has to exist for the <c>ic4</c> namespace:
                </para>
                <code>
                    using ic4;
                    
                    // (...)
                    // Get image buffer from somewhere
                    ImageBuffer imageBuffer = GetImageBuffer();
                    // Save image buffer as bitmap file
                    imageBuffer.SaveAsbitmap("test.bmp");
                </code>
                <para>
                    Although not preferred, the function can also be called explicitly:
                </para>
                <code>
                    // Get image buffer from somewhere
                    ImageBuffer imageBuffer = GetImageBuffer();
                    // Save image buffer as bitmap file
                    ImageBufferExtensions.SaveAsbitmap(imageBuffer, "test.bmp");
                </code>
            </example>
        </member>
        <member name="M:ic4.ImageBufferExtensions.SaveAsBitmap(ic4.ImageBuffer,System.String,System.Boolean)">
            <summary>
                Saves an image buffer as a Bitmap file.
            </summary>
            <param name="buffer">
                An image buffer
            </param>
            <param name="filename">
                Path of the image file
            </param>
            <param name="storeBayerRawDataAsMonochrome">
                If <c>true</c>, and the image buffer's pixel format is a bayer format, interpret the pixel data as monochrome
                and store the raw data as a monochrome image.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>buffer</c> is <c>null</c>, or <c>filename</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    Depending on the pixel format of the image buffer, a transformation is applied before saving the image:
                    <list type="bullet">
                        <item>
                            Monochrome pixel formats are converted to Mono8 and stored as a 8-bit monochrome bitmap file.
                        </item>
                        <item>
                            Bayer, RGB and YUV pixel formats are converted to BGR8 and stored as a 24-bit color bitmap file.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.ImageBufferExtensions.SaveAsJpeg(ic4.ImageBuffer,System.String,System.Int32)">
            <summary>
                Saves an image buffer as a Jpeg file
            </summary>
            <param name="buffer">
                An image buffer
            </param>
            <param name="filename">
                Path of the image file
            </param>
            <param name="qualityPercent">
                <para>
                    Specifies the Jpeg image quality in percent.
                </para>
                <para>
                    High quality images will take more disk space, low quality images are smaller.
                </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>buffer</c> is <c>null</c>, or <c>filename</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    Depending on the pixel format of the image buffer, a transformation is applied before saving the image:
                    <list type="bullet">
                        <item>
                            Monochrome pixel formats are converted to Mono8 and stored as a monochrome Jpeg file.
                        </item>
                        <item>
                            Bayer, RGB and YUV pixel formats are converted to BGR8 stored as a color Jpeg file.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.ImageBufferExtensions.SaveAsPng(ic4.ImageBuffer,System.String,System.Boolean,ic4.PngCompressionLevel)">
            <summary>
                Saves an image buffer as a PNG file.
            </summary>
            <param name="buffer">
                An image buffer
            </param>
            <param name="filename">
                Path of the image file
            </param>
            <param name="storeBayerRawDataAsMonochrome">
                If <c>true</c>, and the image buffer's pixel format is a bayer format, interpret the pixel data as monochrome
                and store the raw data as a monochrome image.
            </param>
            <param name="compressionLevel">
                Specifies the PNG compression level.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>buffer</c> is <c>null</c>, or <c>filename</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    Depending on the pixel format of the image buffer, a transformation is applied before saving the image:
                    <list type="bullet">
                        <item>
                            Monochrome pixel formats with a bit depth higher than 8bpp
                            are converted to Mono16 and stored as a monochrome PNG file with 16 bits per channel.
                        </item>
                        <item>
                            Mono8 image buffers are stored as a monochrome PNG file with 8 bits per channel.
                        </item>
                        <item>
                            Bayer format with a bit depth higher than 8bpp are converted to BGRa16 and stored as a 4-channel PNG with 16 bits per channel.
                        </item>
                        <item>
                            8-bit Bayer, RGB and YUV pixel formats are converted to BGR8 stored as a 3-channel PNG file with 8 bits per channel.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.ImageBufferExtensions.SaveAsTiff(ic4.ImageBuffer,System.String,System.Boolean)">
            <summary>
                Saves an image buffer as a Tiff file.
            </summary>
            <param name="buffer">
                An image buffer
            </param>
            <param name="filename">
                Path of the image file
            </param>
            <param name="storeBayerRawDataAsMonochrome">
                If <c>true</c>, and the image buffer's pixel format is a bayer format, interpret the pixel data as monochrome
                and store the raw data as a monochrome image.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>buffer</c> is <c>null</c>, or <c>filename</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    Depending on the pixel format of the image buffer, a transformation is applied before saving the image:
                    <list type="bullet">
                        <item>
                            Monochrome pixel formats with a bit depth higher than 8bpp are converted to Mono16 and stored
                            as a monochrome Tiff file with 16 bits per channel.
                        </item>
                        <item>
                            Mono8 image buffers are stored as a monochrome Tiff file with 8 bits per channel.
                        </item>
                        <item>
                            Bayer formats with a bit depth higher than 8bpp are converted to BGRa16 and stored as a 4-channel
                            Tiff file with 16 bits per channel.
                        </item>
                        <item>
                            8-bit Bayer, RGB and YUV pixel formats are converted to BGR8 stored as a 3-channel Tiff file
                            with 8 bits per channel.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="T:ic4.ImageType">
            <summary>
                Represents an image type, including pixel format and image dimensions.
            </summary>
        </member>
        <member name="P:ic4.ImageType.Width">
            <summary>
                The width of the image
            </summary>
            <value>
                The width of the image in pixels, or <c>0</c> if the width is not specified
            </value>
        </member>
        <member name="P:ic4.ImageType.Height">
            <summary>
                The height of the image
            </summary>
            <value>
                The height of the image in pixels, or <c>0</c> if the width is not specified
            </value>
        </member>
        <member name="P:ic4.ImageType.PixelFormat">
            <summary>
                The pixel format of the image
            </summary>
            <value>
                The pixel format of the image, or <see cref="F:ic4.PixelFormat.Unspecified"/> if the pixel format is not specified
            </value>
        </member>
        <member name="M:ic4.ImageType.#ctor(System.Int32,System.Int32,ic4.PixelFormat)">
            <summary>
                Creates a new image type object.
            </summary>
            <param name="width">
                The width of the image in pixels, or <c>0</c> if the width is not specified
            </param>
            <param name="height">
                The height of the image in pixels, or <c>0</c> if the width is not specified
            </param>
            <param name="pixelFormat">
                The pixel format of the image, or <see cref="F:ic4.PixelFormat.Unspecified"/> if the pixel format is not specified
            </param>
        </member>
        <member name="M:ic4.ImageType.ToString">
            <summary>
                Creates a textual representation of the image type
            </summary>
            <returns>
                A textual representation of the image type
            </returns>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.Interface">
            <summary>
                Represents a device interface.
            </summary>
            <remarks>
                <para>
                    Interfaces represent physical connections for cameras to the computer, e.g. network adapters or USB controllers.
                </para>
                <para>
                    <c>Interface</c> objects are created by the library in multiple ways:
                    <list type="bullet">
                        <item>When enumerating the available interfaces using <see cref="P:ic4.DeviceEnum.Interfaces"/>.</item>
                        <item>When querying a <see cref="T:ic4.DeviceInfo"/> object for the interface the device is attached to using <see cref="P:ic4.DeviceInfo.Interface"/>.</item>
                    </list> 
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Interface.Equals(System.Object)">
            <summary>
                Checks whether two interface objects refer to the same interface.
            </summary>
            <param name="obj">
                A second interface object
            </param>
            <returns>
                <c>true</c> if the two interface objects refer to the same interface, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ic4.Interface.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ic4.Interface.Equals(ic4.Interface)">
            <summary>
                Checks whether two interface objects refer to the same interface.
            </summary>
            <param name="other">
                A second interface object
            </param>
            <returns>
                <c>true</c> if the two interface objects refer to the same interface, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:ic4.Interface.PropertyMap">
            <summary>
                Opens the property map for the interface.
            </summary>
            <remarks>
                 The property map can be used to query advanced interface information or configure
                 the interface and its attached devices.
            </remarks>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.Interface.DisplayName">
            <summary>
                The name of the device interface
            </summary>
            <value>
                The name of the device interface
            </value>
        </member>
        <member name="P:ic4.Interface.Devices">
            <summary>
                Enumerates the devices currently attached to this interface.
            </summary>
            <value>
                A list of <see cref="T:ic4.DeviceInfo" /> objects representing the devices attached to this interface.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.Interface.TransportLayerName">
            <summary>
                The name of the transport layer that provides this interface object
            </summary>
            <value>
                The name of the transport layer that provides this interface object
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                This string can be interpreted as a name for the driver providing access to devices on the interface.
            </remarks>
        </member>
        <member name="P:ic4.Interface.TransportLayerVersion">
            <summary>
                The version of the transport layer that provides this interface object.
            </summary>
            <value>
                The version of the transport layer that provides this interface object.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                This string can be interpreted as driver version for the driver providing access devices on the interface.
            </remarks>
        </member>
        <member name="P:ic4.Interface.TransportLayerType">
            <summary>
                The type of the transport layer used by this interface
            </summary>
            <value>
                The transport layer type of this interface
            </value>
        </member>
        <member name="T:ic4.Library">
            <summary>
                Static class containing global library initialization functions
            </summary>
        </member>
        <member name="M:ic4.Library.Init(ic4.LogLevel,ic4.LogLevel,ic4.LogTarget,System.String)">
            <summary>
                Initializes the IC Imaging Control 4 .NET library.
            </summary>
            <param name="apiLogLevel">
                Configures the API log level for the library.
            </param>
            <param name="internalLogLevel">
                Configures the internal log level for the library.
            </param>
            <param name="logTargets">
                Configures the log targets.
            </param>
            <param name="logFilePath">
                If <paramref name="logTargets"/> includes <see cref="F:ic4.LogTarget.File"/>, specifies the log file to use.
            </param>
            <exception cref="T:System.NotSupportedException">
                The platform is not supported
            </exception>
        </member>
        <member name="P:ic4.Library.IsInitialized">
            <summary>
                Checks whether the library was initialized by a successful call to <see cref="M:ic4.Library.Init(ic4.LogLevel,ic4.LogLevel,ic4.LogTarget,System.String)"/>.
            </summary>
        </member>
        <member name="T:ic4.LogLevel">
            <summary>
                Defines the possible library log levels
            </summary>
        </member>
        <member name="F:ic4.LogLevel.Off">
            <summary>
                Disable logging
            </summary>
        </member>
        <member name="F:ic4.LogLevel.Error">
            <summary>
                Log only errors
            </summary>
        </member>
        <member name="F:ic4.LogLevel.Warning">
            <summary>
                Log warnings and above
            </summary>
        </member>
        <member name="F:ic4.LogLevel.Info">
            <summary>
                Log info and above
            </summary>
        </member>
        <member name="F:ic4.LogLevel.Debug">
            <summary>
                Log debug and above
            </summary>
        </member>
        <member name="F:ic4.LogLevel.Trace">
            <summary>
                Log trace and above
            </summary>
        </member>
        <member name="T:ic4.LogTarget">
            <summary>
                Defines the possible log targets
            </summary>
        </member>
        <member name="F:ic4.LogTarget.None">
            <summary>
                Disable logging
            </summary>
        </member>
        <member name="F:ic4.LogTarget.StdOut">
            <summary>
                Log to stdout
            </summary>
        </member>
        <member name="F:ic4.LogTarget.StdErr">
            <summary>
                Log to stderr
            </summary>
        </member>
        <member name="F:ic4.LogTarget.File">
            <summary>
                Log to a file specified by the <c>logFileName</c> parameter of <see cref="M:ic4.Library.Init(ic4.LogLevel,ic4.LogLevel,ic4.LogTarget,System.String)"/>.
            </summary>
        </member>
        <member name="F:ic4.LogTarget.WinDebug">
            <summary>
                Log using <c>OutputDebugString</c> (Windows only)
            </summary>
        </member>
        <member name="T:ic4.PixelFormat">
            <summary>
                Defines the possible representations of pixels in an image.
            </summary>
            <remarks>
                The pixel format is part of the <see cref="T:ic4.ImageType"/>.
            </remarks>
        </member>
        <member name="F:ic4.PixelFormat.Unspecified">
            <summary>
                Unspecified pixel format, used to partially define a image type
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.Mono8">
            <summary>
                Monochrome 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.Mono10p">
            <summary>
                Monochrome 10-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.Mono12p">
            <summary>
                Monochrome 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.Mono16">
            <summary>
                Monochrome 16-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerBG8">
            <summary>
                Bayer Blue-Green 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerBG10p">
            <summary>
                Bayer Blue-Green 10-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerBG12p">
            <summary>
                Bayer Blue-Green 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerBG16">
            <summary>
                Bayer Blue-Green 16-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGB8">
            <summary>
                 Bayer Green-Blue 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGB10p">
            <summary>
                Bayer Green-Blue 10-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGB12p">
            <summary>
                Bayer Green-Blue 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGB16">
            <summary>
                Bayer Green-Blue 16-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGR8">
            <summary>
                Bayer Green-Red 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGR10p">
            <summary>
                Bayer Green-Red 10-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGR12p">
            <summary>
                Bayer Green-Red 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGR16">
            <summary>
                Bayer Green-Red 16-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerRG8">
            <summary>
                Bayer Red-Green 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerRG10p">
            <summary>
                Bayer Red-Green 10-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerRG12p">
            <summary>
                Bayer Red-Green 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerRG16">
            <summary>
                Bayer Red-Green 16-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BGRa8">
            <summary>
                Blue-Green-Red-alpha 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BGRa16">
            <summary>
                Blue-Green-Red-alpha 16-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BGR8">
            <summary>
                Blue-Green-Red 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.Mono12Packed">
            <summary>
                GigE Vision specific format, Monochrome 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerBG12Packed">
            <summary>
                GigE Vision specific format, Bayer Blue-Green 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGB12Packed">
            <summary>
                GigE Vision specific format, Bayer Green-Blue 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerGR12Packed">
            <summary>
                GigE Vision specific format, Bayer Green-Red 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.BayerRG12Packed">
            <summary>
                GigE Vision specific format, Bayer Red-Green 12-bit packed
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.YUV422_8">
            <summary>
                YUV 4:2:2 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.YCbCr422_8">
            <summary>
                YCbCr 4:2:2 8-bit
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.YCbCr411_8">
            <summary>
                YCbCr 4:1:1 8-bit (CbYYCrYY)
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.YCbCr411_8_CbYYCrYY">
            <summary>
                YCbCr 4:1:1 8-bit (YYCbYYCr)
            </summary>
        </member>
        <member name="F:ic4.PixelFormat.Invalid">
            <summary>
                Invalid pixel format
            </summary>
        </member>
        <member name="T:ic4.PropBoolean">
            <summary>
                Boolean properties represent a feature whose value is a simple on/off switch.
            </summary>
            <remarks>
                <para>
                    PropBoolean instances are created in multiple ways:
                </para>
                <list type="bullet">
                    <item>
                        By directly querying a <see cref="T:ic4.PropertyMap"/> for a boolean property:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdBoolean)"/></item>
                            <item><see cref="M:ic4.PropertyMap.FindBoolean(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdBoolean,ic4.PropBoolean@)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFindBoolean(System.String,ic4.PropBoolean@)"/></item>
                        </list>
                    </item>
                    <item>
                        By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                        generic property objects:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                            <item><see cref="P:ic4.PropCategory.Features"/></item>
                            <item><see cref="P:ic4.PropertyMap.All"/></item>
                            <item><see cref="P:ic4.Property.SelectedProperties"/></item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:ic4.PropBoolean.Value">
            <summary>
                <para>
                    The current value of this property
                </para>
                <para>
                    The value is only writable is the property's writability is not restricted.
                    See <see cref="P:ic4.Property.IsLocked" />, <see cref="P:ic4.Property.IsReadonly" />, <see cref="P:ic4.Property.IsAvailable" />.
                </para>
            </summary>
            <value>
                The current value of this property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropBoolean.TryGetValue(System.Boolean@)">
            <summary>
                Tries to get the value of this property without throwing an exception in case of an error.
            </summary>
            <param name="val">
                Output parameter receiving the current value of the property
            </param>
            <returns>
                <c>true</c>, if the property value was read successfully, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:ic4.PropBoolean.TrySetValue(System.Boolean)">
            <summary>
                Tries to set the value of this property without throwing an exception in case of an error.
            </summary>
            <param name="val">
                The new value to set
            </param>
            <returns>
                <c>true</c>, if the property value was set successfully, otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:ic4.PropCategory">
            <summary>
                Category properties define a tree-relationship between all properties in a property map.
            </summary>
            <remarks>
                <para>
                    The root of the tree is always the category property with the name <c>Root</c>.
                </para>
                <para>
                    To find which properties are linked from a category, use the <see cref="P:ic4.PropCategory.Features"/> property.
                </para>
                <para>
                    Categories can contain other categories recursively. A very simple category tree might look like this:
                    <list type="bullet">
                        <item>
                            <c>Root</c> (category)
                            <list type="bullet">
                                <item>
                                    <c>AcquisitionControl</c> (category)
                                    <list type="bullet">
                                        <item><c>AcquisitionStart</c> (command)</item>
                                        <item><c>AcquisitionStop</c> (command)</item>
                                        <item><c>AcquisitionFrameRate</c> (float)</item>
                                    </list>
                                </item>
                                <item>
                                    <c>ImageFormatControl</c> (category)
                                    <list type="bullet">
                                        <item><c>Width</c> (integer)</item>
                                        <item><c>Height</c> (integer)</item>
                                    </list>
                                </item>
                            </list>
                        </item>
                    </list>
                </para>
                <para>
                    PropCategory instances are created in multiple ways:
                </para>
                <list type="bullet">
                    <item>
                        By directly querying a <see cref="T:ic4.PropertyMap"/> for a category property:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.FindCategory(System.String)"/></item>
                        </list>
                    </item>
                    <item>
                        By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                        generic property objects:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                            <item><see cref="P:ic4.PropCategory.Features"/></item>
                            <item><see cref="P:ic4.PropertyMap.All"/></item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:ic4.PropCategory.Features">
            <summary>
                Enumerates the properties in a category property
            </summary>
            <value>
                An enumeration of the properties contained in the category
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.PropCommand">
            <summary>
                Command properties represent an action that can be performed by the device.
            </summary>
            <remarks>
                <para>
                    A common example for a command property is <c>TriggerSoftware</c>.
                </para>
                <para>
                    PropCommand instances are created in multiple ways:
                </para>
                <list type="bullet">
                    <item>
                        By directly querying a <see cref="T:ic4.PropertyMap"/> for a category property:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdCommand)"/></item>
                            <item><see cref="M:ic4.PropertyMap.FindCommand(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdCommand,ic4.PropCommand@)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFindCommand(System.String,ic4.PropCommand@)"/></item>
                        </list>
                    </item>
                    <item>
                        By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                        generic property objects:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                            <item><see cref="P:ic4.PropCategory.Features"/></item>
                            <item><see cref="P:ic4.PropertyMap.All"/></item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.PropCommand.Execute">
            <summary>
                Executes the command.
            </summary>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropCommand.IsDone">
            <summary>
                Checks whether a command has finished executing.
            </summary>
            <value>
                <c>true</c>, if the command is completed. <c>false</c>, if the command is still executing.
            </value>
            <remarks>
                If the command was never executed before, the value is <c>true</c>.
            </remarks>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.PropEnumEntry">
            <summary>
                Represents an entry in a <see cref="T:ic4.PropEnumeration"/>.
            </summary>
            <remarks>
                <para>
                    Enumeration entries are derived from <see cref="T:ic4.Property"/>, since they also have
                    most property aspects like a name, display name, tooltip, visibility and accessibility flags.
                </para>
                <para>
                    In addition to those common attributes, they have a constant value that can be queried using <see cref="P:ic4.PropEnumEntry.IntValue"/>.
                </para>
                <para>
                    PropEnumEntry instances are created in multiple ways:
                </para>
                <list type="bullet">
                    <item>
                        By enumerating an enumeration property's entries using <see cref="P:ic4.PropEnumeration.Entries"/>
                    </item>
                    <item>
                         By calling <see cref="P:ic4.PropEnumeration.SelectedEntry"/> to get the currently selected entry.
                    </item>
                    <item>
                        By calling <see cref="M:ic4.PropEnumeration.FindEntry(System.String)"/> or <see cref="M:ic4.PropEnumeration.FindEntry(System.Int64)"/> to find
                        the entry matching a given name or value.
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:ic4.PropEnumEntry.IntValue">
            <summary>
                The integer value of the enumeration entry.
            </summary>
            <value>
                The integer value of the enumeration entry.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.PropEnumeration">
            <summary>
                Enumeration properties represent a feature whose value is selected from a list of named entries.
            </summary>
            <remarks>
                <para>
                    Common examples for an enumeration properties are <c>PixelFormat</c>, <c>TriggerMode</c> or <c>ExposureAuto</c>.
                </para>
                <para>
                    The value of an enumeration property can be get or set by both a enumeration entry's name or value.
                </para>
                <para>
                    Enumeration entries are represented by <see cref="T:ic4.PropEnumEntry"/> objects;
                    the possible entries are returned by <see cref="P:ic4.PropEnumeration.Entries"/>.
                </para>
                <para>
                    PropEnumeration instances are created in multiple ways:
                </para>
                <list type="bullet">
                    <item>
                        By directly querying a <see cref="T:ic4.PropertyMap"/> for a boolean property:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdEnumeration)"/></item>
                            <item><see cref="M:ic4.PropertyMap.FindEnumeration(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdEnumeration,ic4.PropEnumeration@)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFindEnumeration(System.String,ic4.PropEnumeration@)"/></item>
                        </list>
                    </item>
                    <item>
                        By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                        generic property objects:
                        <list type="bullet">
                            <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                            <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                            <item><see cref="P:ic4.PropCategory.Features"/></item>
                            <item><see cref="P:ic4.PropertyMap.All"/></item>
                            <item><see cref="P:ic4.Property.SelectedProperties"/></item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:ic4.PropEnumeration.IntValue">
            <summary>
                The integer value of the currently selected entry of this enumeration property
            </summary>
            <value>
                The integer value of the currently selected entry of this enumeration property
            </value>
        </member>
        <member name="P:ic4.PropEnumeration.SelectedEntry">
            <summary>
                The currently selected entry of this enumeration property
            </summary>
            <value>
                The currently selected entry of this enumeration property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropEnumeration.Value">
            <summary>
                The name of the currently selected entry of this enumeration property
            </summary>
            <value>
                The name of the currently selected entry of this enumeration property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropEnumeration.Entries">
            <summary>
                Enumerates the enumeration's list of entries.
            </summary>
            <value>
                An enumeration of <see cref="T:ic4.PropEnumEntry" /> objects representing the enumeration's entries.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropEnumeration.FindEntry(System.Int64)">
            <summary>
                Finds the enumeration entry with a specified value.
            </summary>
            <param name="value">The value of the enumeration entry to find</param>
            <returns>The <see cref="T:ic4.PropEnumEntry" /> with the specified value</returns>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropEnumeration.FindEntry(System.String)">
            <summary>
                Finds the enumeration entry with a specified name.
            </summary>
            <param name="name">The name of the enumeration entry to find</param>
            <returns>The <see cref="T:ic4.PropEnumEntry" /> with the specified name</returns>
            <exception cref="T:System.ArgumentNullException"><c>name</c> is <c>null</c></exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.PropertyType">
            <summary>
                Defines the possible property types.
            </summary>
            <remarks>
                <para>
                    Property objects report their type through their <see cref="P:ic4.Property.Type"/> member.
                </para>
            </remarks>
        </member>
        <member name="F:ic4.PropertyType.Boolean">
            <summary>
                Boolean property (<see cref="T:ic4.PropBoolean"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Category">
            <summary>
                Category property (<see cref="T:ic4.PropCategory"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Command">
            <summary>
                Command property (<see cref="T:ic4.PropCommand"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.EnumEntry">
            <summary>
                Enumeration entry property (<see cref="T:ic4.PropEnumEntry"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Enumeration">
            <summary>
                Enumeration property (<see cref="T:ic4.PropEnumeration"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Float">
            <summary>
                Float property (<see cref="T:ic4.PropFloat"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Integer">
            <summary>
                Integer property (<see cref="T:ic4.PropInteger"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Invalid">
            <summary>
                Not a valid property, indicates an error
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Port">
            <summary>
                Port property
            </summary>
        </member>
        <member name="F:ic4.PropertyType.Register">
            <summary>
                Register property (<see cref="T:ic4.PropRegister"/>)
            </summary>
        </member>
        <member name="F:ic4.PropertyType.String">
            <summary>
                String property (<see cref="T:ic4.PropString"/>)
            </summary>
        </member>
        <member name="T:ic4.PropertyVisibility">
            <summary>
                Defines the possible property visibilities
            </summary>
            <remarks>
                Each property has a visibility hint that can be used to create user interfaces for different user types.
            </remarks>
        </member>
        <member name="F:ic4.PropertyVisibility.Beginner">
            <summary>
                Beginner visibility
            </summary>
        </member>
        <member name="F:ic4.PropertyVisibility.Expert">
            <summary>
                Expert visibility
            </summary>
        </member>
        <member name="F:ic4.PropertyVisibility.Guru">
            <summary>
                Guru visibility
            </summary>
        </member>
        <member name="F:ic4.PropertyVisibility.Invisible">
            <summary>
                Invisible
            </summary>
        </member>
        <member name="T:ic4.PropertyIncrementMode">
            <summary>
                Defines the possible property increment modes for Integer and Float properties.
            </summary>
        </member>
        <member name="F:ic4.PropertyIncrementMode.Increment">
            <summary>
                The property used a fixed step between valid values.
            </summary>
            <remarks>
                Use <see cref="P:ic4.PropInteger.Increment"/> or <see cref="P:ic4.PropFloat.Increment"/> to get the property's step size.
            </remarks>
        </member>
        <member name="F:ic4.PropertyIncrementMode.ValueSet">
            <summary>
                The property defines a set of valid values.
            </summary>
            <remarks>
                Use <see cref="P:ic4.PropInteger.ValidValueSet"/> or <see cref="P:ic4.PropFloat.ValidValueSet"/> to query the set of valid values.
            </remarks>
        </member>
        <member name="F:ic4.PropertyIncrementMode.None">
            <summary>
                The property allows setting all values between its minimum and maximum value.
            </summary>
            <remarks>
                <para>
                    This mode is only valid for float properties.
                </para>
                <para>
                    Integer properties report increment 1 if they allow every possible value between their minimum and maximum value.
                </para>
            </remarks>
        </member>
        <member name="T:ic4.Property">
            <summary>
                Represents a property of a component, usually a video capture device.
            </summary>
            <remarks>
                <para>
                    All property types are derived from Property, e.g. <see cref="T:ic4.PropInteger"/> ,
                    <see cref="T:ic4.PropCommand"/> or <see cref="T:ic4.PropEnumeration"/>.
                </para>
                <para>
                    <see cref="T:ic4.PropEnumEntry"/> is also derived from Property, even though they are not part of the category tree.
                    Nevertheless, enumeration entries support all standard property operations.
                </para>
                <para>
                    Property objects and objects of classes derived from Property are created in multiple ways:
                    <list type="bullet">
                        <item>
                            By passing the name of a known property to <see cref="M:ic4.PropertyMap.Find(System.String)"/> or one
                            of its typed sibling functions like <see cref="M:ic4.PropertyMap.FindInteger(System.String)"/>,
                        </item>
                        <item>
                            By passing a property identifier to <see cref="M:ic4.PropertyMap.Find(ic4.PropIdEnumeration)"/>
                            or one of its overloads,
                        </item>
                        <item>
                            By enumerating <see cref="P:ic4.PropCategory.Features"/> to get all properties from a category,
                        </item>
                        <item>
                            By enumerating <see cref="P:ic4.PropertyMap.All"/> to get all properties in a property map's category tree,
                        </item>
                        <item>
                            By enumerating <see cref="P:ic4.PropEnumeration.Entries"/> to get all entries of an enumeration property,
                        </item>
                        <item>
                            By enumerating <see cref="P:ic4.Property.SelectedProperties"/> to get the properties selected by a property.
                        </item>
                    </list>
                </para>
                <para>
                    Property objects hold a reference to an internal library object. To release the reference,
                    call <see cref="M:ic4.HandleObject.Dispose"/>.
                </para>
                <para>
                    Property objects become invalid after the device has been closed, and will throw an exception
                    if used afterwards.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.Property.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:ic4.Property.Notification">
            <summary>
                Occurs whenever an aspect of the property changes, for example its value or locked state.
            </summary>
        </member>
        <member name="P:ic4.Property.Type">
            <summary>
                The type of the property
            </summary>
            <value>
                the type of the property
            </value>
        </member>
        <member name="P:ic4.Property.DisplayName">
            <summary>
                The display name of the property
            </summary>
            <value>
                The display name of the property
            </value>
            <remarks>
                A property's display name is a text representation of the property that is meant to be displayed in user interfaces.
                For example, the display name of the <c>ExposureTime</c> property usually is <c>Exposure Time</c>.
            </remarks>
        </member>
        <member name="P:ic4.Property.Name">
            <summary>
                The name of the property
            </summary>
            <value>
                The name of the property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.Property.Description">
            <summary>
                A description for the property
            </summary>
            <value>
                A description for the property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                A property's description is a short text that describes the property, usually in more detail than the <see cref="P:ic4.Property.Tooltip" />.
            </remarks>
        </member>
        <member name="P:ic4.Property.Tooltip">
            <summary>
                A tooltip for the property
            </summary>
            <value>
                A tooltip for the property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                A property's tooltip is a text that can be used when a tooltip is required by a user interface.
                Usually, the tooltip is a very short description of the property.
            </remarks>
        </member>
        <member name="P:ic4.Property.Visibility">
            <summary>
                Visibility hint for the property.
            </summary>
            <value>
                Visibility hint for the property.
            </value>
            <remarks>
                The visibility hint can be used to create user interfaces with different complexities.
                The most commonly used properties have the beginner visibility, while rarely used or
                diagnostic features might be tagged guru or even invisible.
            </remarks>
        </member>
        <member name="P:ic4.Property.IsLocked">
            <summary>
                Indicates whether the property is currently locked.
            </summary>
            <value>
                <c>true</c>, if the property is currently locked, otherwise <c>false</c>
            </value>
            <remarks>
                <para>
                    A locked property can be read, but attempts to write its value will fail.
                </para>
                <para>
                    A property's locked status may change upon writing to another property.
                </para>
                <para>
                    Common examples for locked properties are <c>ExposureTime</c> or <c>Gain</c> if
                    <c>ExposureAuto</c> or <c>GainAuto</c> are enabled.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Property.IsLikelyLockedByStream">
            <summary>
                Tries to determine whether a property is locked because a data stream is active.
            </summary>
            <value>
                <c>true</c>, if the property is currently locked, and will likely be unlocked if the data stream is stopped.
                <c>false</c>, if the property is not currently locked, or stopping the data stream will probably not lead to
                the property being unlocked.
            </value>
            <remarks>
                For technical reasons, this function cannot always accurately predict the future.
            </remarks>
        </member>
        <member name="P:ic4.Property.IsAvailable">
            <summary>
                Indicates whether the property is currently available.
            </summary>
            <value>
                <c>true</c>, if the property is currently available, otherwise <c>false</c>
            </value>
            <remarks>
                <para>
                    If a property is not available, attempts to read or write its value will fail.
                </para>
                <para>
                    A property may become unavailable, if its value does not have a meaning in the current state of the device.
                    The property's availability status can change upon writing to another property.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Property.IsReadonly">
            <summary>
                Indicates whether the whether a property is read-only.
            </summary>
            <value>
                <c>true</c>, if the property is read-only, otherwise <c>false</c>
            </value>
            <remarks>
                <para>
                    A read-only property will never be writable, the read-only status will never change.
                </para>
                <para>
                    A Common examples for a read-only property is <c>DeviceTemperature</c>.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Property.IsSelector">
            <summary>
                Indicates whether this property's value changes the meaning and/or value of other properties.
            </summary>
            <value>
                <c>true</c>, if the property is a selector, otherwise <c>false</c>
            </value>
        </member>
        <member name="P:ic4.Property.SelectedProperties">
            <summary>
                Enumerates the properties whose values' meaning depend on this property.
            </summary>
            <value>
                An enumeration of Property objects representing the property's selected properties.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.PropId">
            <summary>
                Contains declarations of identifiers for known properties.
            </summary>
            <remarks>
                Using <see cref="T:ic4.PropId"/>-derived property identifiers allows typed access to property objects, e.g. <see cref="M:ic4.PropertyMap.Find(ic4.PropIdInteger)"/>
            </remarks>
        </member>
        <member name="F:ic4.PropId.AcquisitionBurstFrameCount">
            <summary>
                Number of frames to acquire for each trigger.
            </summary>
        </member>
        <member name="F:ic4.PropId.AcquisitionBurstInterval">
            <summary>
                Minimum interval between frames in an acquisition burst.
            </summary>
        </member>
        <member name="F:ic4.PropId.AcquisitionFrameRate">
            <summary>
                Controls the acquisition rate at which the frames are captured.
            </summary>
        </member>
        <member name="F:ic4.PropId.AcquisitionMode">
            <summary>
                Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops.
            </summary>
        </member>
        <member name="F:ic4.PropId.AcquisitionStart">
            <summary>
                Starts the Acquisition of the device. The number of frames captured is specified by AcquisitionMode.
            </summary>
        </member>
        <member name="F:ic4.PropId.AcquisitionStop">
            <summary>
                Stops the Acquisition of the device at the end of the current Frame. It is mainly used when AcquisitionMode is Continuous but can be used in any acquisition mode.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionDeviceKey">
            <summary>
                Provides the device key that allows the device to check the validity of action commands. The device internal assertion of an action signal is only authorized if the ActionDeviceKey and the action device key value in the protocol message are equal.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionGroupKey">
            <summary>
                Provides the key that the device will use to validate the action on reception of the action protocol message.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionGroupMask">
            <summary>
                Provides the mask that the device will use to validate the action on reception of the action protocol message.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionQueueSize">
            <summary>
                Indicates the size of the scheduled action commands queue. This number represents the maximum number of scheduled action commands that can be pending at a given point in time.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionSchedulerCancel">
            <summary>
                Cancels all scheduled actions.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionSchedulerCommit">
            <summary>
                Schedules the action to be executed time specified by ActionSchedulerTime, with optional repetition in intervals of ActionSchedulerInterval.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionSchedulerInterval">
            <summary>
                Action repetition interval. A value of 0 schedules the action to be executed only once.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionSchedulerStatus">
            <summary>
                Indicates whether there are actions scheduled.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionSchedulerTime">
            <summary>
                Camera time for when the action is to be scheduled.
            </summary>
        </member>
        <member name="F:ic4.PropId.ActionSelector">
            <summary>
                Selects to which Action Signal further Action settings apply.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFocusROIEnable">
            <summary>
                Enable the region of interest for auto focus.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFocusROIHeight">
            <summary>
                Vertical size of the auto focus region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFocusROILeft">
            <summary>
                Horizontal offset of the auto focus region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFocusROITop">
            <summary>
                Vertical offset of the auto focus region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFocusROIWidth">
            <summary>
                Horizontal size of the auto focus region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFunctionsROIEnable">
            <summary>
                Enable the region of interest for auto functions.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFunctionsROIHeight">
            <summary>
                Vertical size of the auto functions region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFunctionsROILeft">
            <summary>
                Horizontal offset of the auto functions region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFunctionsROIPreset">
            <summary>
                Select a predefined region of interest for auto functions.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFunctionsROITop">
            <summary>
                Vertical offset of the auto functions region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.AutoFunctionsROIWidth">
            <summary>
                Horizontal size of the auto functions region of interest.
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceRatio">
            <summary>
                Controls ratio of the selected color component to a reference color component. It is used for white balancing.
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceRatioSelector">
            <summary>
                This enumeration selects a balance ratio control to configuration. Once a balance ratio control has been selected, all changes to the balance ratio settings will be applied to the selected control.
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceWhiteAuto">
            <summary>
                Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceWhiteAutoPreset">
            <summary>
                Selects a specific preset for automatic white balance.
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceWhiteMode">
            <summary>
                Configures the way auto white balance works.
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceWhiteTemperature">
            <summary>
                Adjusts the white balance controls to match the ambient light temperature
            </summary>
        </member>
        <member name="F:ic4.PropId.BalanceWhiteTemperaturePreset">
            <summary>
                Selects a specific white balance preset.
            </summary>
        </member>
        <member name="F:ic4.PropId.BinningHorizontal">
            <summary>
                Number of horizontal photo-sensitive cells to combine together. This increases the intensity (or signal to noise ratio) of the pixels and reduces the horizontal resolution (width) of the image. A value of 1 indicates that no horizontal binning is performed by the camera.
            </summary>
        </member>
        <member name="F:ic4.PropId.BinningVertical">
            <summary>
                Number of vertical photo-sensitive cells to combine together. This increases the intensity (or signal to noise ratio) of the pixels and reduces the vertical resolution (height) of the image. A value of 1 indicates that no vertical binning is performed by the camera.
            </summary>
        </member>
        <member name="F:ic4.PropId.BlackLevel">
            <summary>
                Controls the analog black level as an absolute physical value. This represents a DC offset applied to the video signal
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkBlockId">
            <summary>
                Returns the block ID (frame number) of the image
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkEnable">
            <summary>
                Enables the inclusion of the selected Chunk data in the payload of the image.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkExposureTime">
            <summary>
                Returns the exposure time used to capture the image.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkGain">
            <summary>
                Returns the gain used to capture the image.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkImage">
            <summary>
                Returns the entire image data included in the payload.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkIMX174FrameId">
            <summary>
                IMX174 double exposure frame id.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkIMX174FrameSet">
            <summary>
                IMX174 double exposure frame set identifier.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkModeActive">
            <summary>
                Activates the inclusion of Chunk data in the payload of the image.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkMultiFrameSetFrameId">
            <summary>
                Returns the frame id in the frame set in Multi Frame Set Output Mode.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkMultiFrameSetId">
            <summary>
                Returns the id of the frame set in Multi Frame Set Output Mode.
            </summary>
        </member>
        <member name="F:ic4.PropId.ChunkSelector">
            <summary>
                Selects which Chunk to enable or control
            </summary>
        </member>
        <member name="F:ic4.PropId.ColorTransformationEnable">
            <summary>
                Activates the selected Color Transformation module.
            </summary>
        </member>
        <member name="F:ic4.PropId.ColorTransformationSelector">
            <summary>
                Selects which Color Transformation module is controlled by the various Color Transformation features.
            </summary>
        </member>
        <member name="F:ic4.PropId.ColorTransformationValue">
            <summary>
                Represents the value of the selected Gain factor or Offset inside the Transformation matrix.
            </summary>
        </member>
        <member name="F:ic4.PropId.ColorTransformationValueSelector">
            <summary>
                Selects the Gain factor or Offset of the Transformation matrix to access in the selected Color Transformation module.
            </summary>
        </member>
        <member name="F:ic4.PropId.Contrast">
            <summary>
                Controls Contrast.
            </summary>
        </member>
        <member name="F:ic4.PropId.DecimationHorizontal">
            <summary>
                Horizontal sub-sampling of the image. This reduces the horizontal resolution (width) of the image by the specified horizontal decimation factor.
            </summary>
        </member>
        <member name="F:ic4.PropId.DecimationVertical">
            <summary>
                Vertical sub-sampling of the image. This reduces the vertical resolution (height) of the image by the specified vertical decimation factor.
            </summary>
        </member>
        <member name="F:ic4.PropId.Denoise">
            <summary>
                Controls the strength of the denoise algorithm.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceEventChannelCount">
            <summary>
                Indicates the number of event channels supported by the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceFactoryReset">
            <summary>
                Resets all user-programmable non-volatile memory to default. After reset, the device must be rediscovered.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceFirmwareVersion">
            <summary>
                Version of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceLinkHeartbeatTimeout">
            <summary>
                Controls the current heartbeat timeout of the specific Link.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceLinkSelector">
            <summary>
                Selects which Link of the device to control.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceModelName">
            <summary>
                Model of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceReset">
            <summary>
                Resets the device to its power up state. After reset, the device must be rediscovered.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceScanType">
            <summary>
                Returns the scan type of the sensor of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceSerialNumber">
            <summary>
                Device's serial number. This string is a unique identifier of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceSFNCVersionMajor">
            <summary>
                Major version of the Standard Features Naming Convention that was used to create the device's GenICam XML
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceSFNCVersionMinor">
            <summary>
                Minor version of the Standard Features Naming Convention that was used to create the device's GenICam XML
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceSFNCVersionSubMinor">
            <summary>
                Sub minor version of the Standard Features Naming Convention that was used to create the device's GenICam XML
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceStreamChannelCount">
            <summary>
                Indicates the number of streaming channels supported by the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceStreamChannelEndianness">
            <summary>
                Endianess of multi-byte pixel data for this stream.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceStreamChannelLink">
            <summary>
                Index of device`s Link to use for streaming the specifed stream channel.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceStreamChannelPacketSize">
            <summary>
                Specifies the stream packet size, in bytes, to send on the selected channel.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceStreamChannelSelector">
            <summary>
                Selects the stream channel to control.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceStreamChannelType">
            <summary>
                Reports the type of the stream channel.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceTemperature">
            <summary>
                Device temperature in degrees Celsius (°C). It is measured at the location selected by DeviceTemperatureSelector.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceTemperatureSelector">
            <summary>
                Selects the location within the device, where the temperature will be measured.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceTLType">
            <summary>
                Transport Layer type of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceTLVersionMajor">
            <summary>
                Major version of the Transport Layer of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceTLVersionMinor">
            <summary>
                Minor version of the Transport Layer of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceTLVersionSubMinor">
            <summary>
                Sub minor version of the Transport Layer of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceType">
            <summary>
                Returns the device type.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceUserID">
            <summary>
                User-programmable device identifier.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceVendorName">
            <summary>
                Name of the manufacturer of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DeviceVersion">
            <summary>
                Version of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.DisableInfoOverlay">
            <summary>
                Disables the HDMI format info overlay.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventExposureEnd">
            <summary>
                Unique identifier of the Exposure End event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventExposureEndFrameID">
            <summary>
                Frame ID of the Exposure End event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventExposureEndTimestamp">
            <summary>
                Timestamp of the Exposure End event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventFocusMoveCompleted">
            <summary>
                Unique identifier of the Focus Move Completed event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventFocusMoveCompletedFocus">
            <summary>
                Focus value of the Focus Move Completed event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventFocusMoveCompletedTimestamp">
            <summary>
                Timestamp of the Focus Move Completed event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventFrameTriggerMissed">
            <summary>
                Unique identifier of the Frame Trigger Missed event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventFrameTriggerMissedTimestamp">
            <summary>
                Timestamp of the Frame Trigger Missed event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventLine1FallingEdge">
            <summary>
                Unique identifier of the Line1 Falling Edge event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventLine1FallingEdgeTimestamp">
            <summary>
                Timestamp of the Line1 Falling Edge event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventLine1RisingEdge">
            <summary>
                Unique identifier of the Line1 Rising Edge event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventLine1RisingEdgeTimestamp">
            <summary>
                Timestamp of the Line1 Rising Edge event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventNotification">
            <summary>
                Enables event notifications for the currently selected event. The event can selected using the Event Selector parameter.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventSelector">
            <summary>
                Sets the event notification to be enabled. The notification can be enabled using the Event Notification parameter.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventTest">
            <summary>
                Unique identifier of the Test event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventTestTimestamp">
            <summary>
                Timestamp of the test event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventZoomMoveCompleted">
            <summary>
                Unique identifier of the Zoom Move Completed event. Use this parameter to get notified when the event occurs.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventZoomMoveCompletedTimestamp">
            <summary>
                Timestamp of the Zoom Move Completed event.
            </summary>
        </member>
        <member name="F:ic4.PropId.EventZoomMoveCompletedZoom">
            <summary>
                Zoom value of the Zoom Move Completed event.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExpandOutputRange">
            <summary>
                Use the full brightness range when receiving YUV data via HDMI.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAuto">
            <summary>
                Sets the automatic exposure mode when ExposureMode is Timed.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAutoHighlighReduction">
            <summary>
                Lets the ExposureAuto/GainAuto algorithm try to avoid over-exposures.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAutoHighlightReduction">
            <summary>
                Lets the ExposureAuto/GainAuto algorithm try to avoid over-exposures.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAutoLowerLimit">
            <summary>
                Lower limit of the ExposureAuto function.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAutoReference">
            <summary>
                Configures the target image brightness of the ExposureAuto/GainAuto algorithm.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAutoUpperLimit">
            <summary>
                Upper limit of the ExposureAuto function.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureAutoUpperLimitAuto">
            <summary>
                Automatically sets the upper limit to match the Acquisition Frame Rate.
            </summary>
        </member>
        <member name="F:ic4.PropId.ExposureTime">
            <summary>
                Sets the Exposure time when ExposureMode is Timed and ExposureAuto is Off. This controls the duration where the photosensitive cells are exposed to light.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileAccessBuffer">
            <summary>
                Defines the intermediate access buffer that allows the exchange of data between the device file storage and the application.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileAccessLength">
            <summary>
                Controls the Length of the mapping between the device file storage and the FileAccessBuffer.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileAccessOffset">
            <summary>
                Controls the Offset of the mapping between the device file storage and the FileAccessBuffer.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileOpenMode">
            <summary>
                Selects the access mode in which a file is opened in the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileOperationExecute">
            <summary>
                Executes the operation selected by FileOperationSelector on the selected file.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileOperationResult">
            <summary>
                Represents the file operation result. For Read or Write operations, the number of successfully read/written bytes is returned.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileOperationSelector">
            <summary>
                Selects the target operation for the selected file in the device. This Operation is executed when the FileOperationExecute feature is called.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileOperationStatus">
            <summary>
                Represents the file operation execution status.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileSelector">
            <summary>
                Selects the target file in the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.FileSize">
            <summary>
                Represents the size of the selected file in bytes.
            </summary>
        </member>
        <member name="F:ic4.PropId.Focus">
            <summary>
                Changes the Focus setting of the lens.
            </summary>
        </member>
        <member name="F:ic4.PropId.FocusAuto">
            <summary>
                Enables automatic Focus control.
            </summary>
        </member>
        <member name="F:ic4.PropId.Gain">
            <summary>
                Controls the gain as an absolute physical value. This is an amplification factor applied to he video signal.
            </summary>
        </member>
        <member name="F:ic4.PropId.GainAuto">
            <summary>
                Sets the automatic gain control mode.
            </summary>
        </member>
        <member name="F:ic4.PropId.GainAutoLowerLimit">
            <summary>
                Lower limit of the GainAuto function.
            </summary>
        </member>
        <member name="F:ic4.PropId.GainAutoUpperLimit">
            <summary>
                Upper limit of the GainAuto function.
            </summary>
        </member>
        <member name="F:ic4.PropId.GainMode">
            <summary>
                Configures the sensor-specific Gain (LCG/HCG) setting
            </summary>
        </member>
        <member name="F:ic4.PropId.Gamma">
            <summary>
                Controls the gamma correction of pixel intensity. This is typically used to compensate for nonlinearity of the display system (such as CRT).
            </summary>
        </member>
        <member name="F:ic4.PropId.GevGVSPExtendedIDMode">
            <summary>
                Enables the extended IDs mode
            </summary>
        </member>
        <member name="F:ic4.PropId.GevSCPSDoNotFragment">
            <summary>
                The state of this feature is copied into the "do not fragment" bit of IP header of each stream packet. It can be used by the application to prevent IP fragmentation of packets on the stream channel.
            </summary>
        </member>
        <member name="F:ic4.PropId.GevSCPSPacketSize">
            <summary>
                This GigE Vision specific feature corresponds to DeviceStreamChannelPacketSize and should be kept in sync with it. It specifies the stream packet size, in bytes, to send on the selected channel for a GVSP transmitter or specifies the maximum packet size supported by a GVSP receiver.
            </summary>
        </member>
        <member name="F:ic4.PropId.GPIn">
            <summary>
                Status of the digital input pin.
            </summary>
        </member>
        <member name="F:ic4.PropId.GPOut">
            <summary>
                Status of the digital output pin.
            </summary>
        </member>
        <member name="F:ic4.PropId.Height">
            <summary>
                Height of the image provided by the device (in pixels).
            </summary>
        </member>
        <member name="F:ic4.PropId.HeightMax">
            <summary>
                Maximum height of the image (in pixels). This dimension is calculated after vertical binning, decimation or any other function changing the vertical dimension of the image.
            </summary>
        </member>
        <member name="F:ic4.PropId.Hue">
            <summary>
                Color Hue
            </summary>
        </member>
        <member name="F:ic4.PropId.IMX174HardwareWDREnable">
            <summary>
                Enable IMX174 WDR mode. This mode enables setting a second, longer exposure time (IMX174 WDR Shutter 2), which is used for every other frame.
            </summary>
        </member>
        <member name="F:ic4.PropId.IMX174HardwareWDRShutterMode">
            <summary>
                Select the IMX174 WDR shutter mode. This mode decides whether the second shutter time can be choosen freely, or is fixed at a multiple of the configured ExposureTime.
            </summary>
        </member>
        <member name="F:ic4.PropId.IMX174WDRShutter2">
            <summary>
                Exposure time that is used for every other frame, if IMX174 WDR mode is enabled.
            </summary>
        </member>
        <member name="F:ic4.PropId.IMXLowLatencyTriggerMode">
            <summary>
                Enables the low-latency mode for IMX global shutter sensors. This mode reduces the jitter between trigger input and exposure start, but disallows trigger overlap.
            </summary>
        </member>
        <member name="F:ic4.PropId.InputBits">
            <summary>
                The detected bits per pixel of the HDMI source.
            </summary>
        </member>
        <member name="F:ic4.PropId.InputFp1ks">
            <summary>
                The detected frame rate of the HDMI source.
            </summary>
        </member>
        <member name="F:ic4.PropId.InputHeight">
            <summary>
                The detected width of the HDMI input image.
            </summary>
        </member>
        <member name="F:ic4.PropId.InputWidth">
            <summary>
                The detected width of the HDMI input image.
            </summary>
        </member>
        <member name="F:ic4.PropId.IRCutFilterEnable">
            <summary>
                Enables the IRCutFilter in from of the sensor.
            </summary>
        </member>
        <member name="F:ic4.PropId.Iris">
            <summary>
                Changes the Iris setting of the lens.
            </summary>
        </member>
        <member name="F:ic4.PropId.IrisAuto">
            <summary>
                Enables automatic Iris control.
            </summary>
        </member>
        <member name="F:ic4.PropId.LUTEnable">
            <summary>
                Activates the LUT.
            </summary>
        </member>
        <member name="F:ic4.PropId.LUTIndex">
            <summary>
                Control the index (offset) of the coefficient to access in the LUT.
            </summary>
        </member>
        <member name="F:ic4.PropId.LUTSelector">
            <summary>
                Selects which LUT to control.
            </summary>
        </member>
        <member name="F:ic4.PropId.LUTValue">
            <summary>
                Returns or sets the Value at entry LUTIndex of the LUT.
            </summary>
        </member>
        <member name="F:ic4.PropId.LUTValueAll">
            <summary>
                Accesses all the LUT coefficients in a single access without using individual LUTIndex.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeCustomGain">
            <summary>
                Enables the sensor to use customizable gain values for the different frames of a frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeEnable">
            <summary>
                Enables the sensor to output a sequence of 2 or 4 frames with configurable exposure times and gain values.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeExposureTime0">
            <summary>
                Configures the exposure time for frame 0 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeExposureTime1">
            <summary>
                Configures the exposure time for frame 1 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeExposureTime2">
            <summary>
                Configures the exposure time for frame 2 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeExposureTime3">
            <summary>
                Configures the exposure time for frame 3 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeFrameCount">
            <summary>
                Selects the number of frames in multi frame set output mode.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeGain0">
            <summary>
                Configures the gain for frame 0 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeGain1">
            <summary>
                Configures the gain for frame 1 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeGain2">
            <summary>
                Configures the gain for frame 2 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.MultiFrameSetOutputModeGain3">
            <summary>
                Configures the gain for frame 3 of the frame set.
            </summary>
        </member>
        <member name="F:ic4.PropId.OffsetAutoCenter">
            <summary>
                Automatically adjust the values of OffsetX and OffsetY to select the center region of the sensor.
            </summary>
        </member>
        <member name="F:ic4.PropId.OffsetX">
            <summary>
                Horizontal offset from the origin to the region of interest (in pixels).
            </summary>
        </member>
        <member name="F:ic4.PropId.OffsetY">
            <summary>
                Vertical offset from the origin to the region of interest (in pixels).
            </summary>
        </member>
        <member name="F:ic4.PropId.PayloadSize">
            <summary>
                Provides the number of bytes transferred for each image or chunk on the stream channel. This includes any end-of-line, end-of-frame statistics or other stamp data. This is the total size of data payload for a data block.
            </summary>
        </member>
        <member name="F:ic4.PropId.PixelFormat">
            <summary>
                Format of the pixels provided by the device
            </summary>
        </member>
        <member name="F:ic4.PropId.PtpClockAccuracy">
            <summary>
                Indicates the expected accuracy of the device PTP clock when it is the grandmaster, or in the event it becomes the grandmaster.
            </summary>
        </member>
        <member name="F:ic4.PropId.PtpEnable">
            <summary>
                Enables the Precision Time Protocol (PTP).
            </summary>
        </member>
        <member name="F:ic4.PropId.PtpStatus">
            <summary>
                Returns the current state of the PTP clock.
            </summary>
        </member>
        <member name="F:ic4.PropId.ReverseX">
            <summary>
                Flip the image horizontally.
            </summary>
        </member>
        <member name="F:ic4.PropId.ReverseY">
            <summary>
                Flip the image vertically.
            </summary>
        </member>
        <member name="F:ic4.PropId.Saturation">
            <summary>
                Color Saturation
            </summary>
        </member>
        <member name="F:ic4.PropId.SensorHeight">
            <summary>
                Effective height of the sensor in pixels.
            </summary>
        </member>
        <member name="F:ic4.PropId.SensorPixelHeight">
            <summary>
                Physical size (pitch) in the y direction of a photo sensitive pixel unit.
            </summary>
        </member>
        <member name="F:ic4.PropId.SensorPixelWidth">
            <summary>
                Physical size (pitch) in the x direction of a photo sensitive pixel unit.
            </summary>
        </member>
        <member name="F:ic4.PropId.SensorWidth">
            <summary>
                Effective width of the sensor in pixels.
            </summary>
        </member>
        <member name="F:ic4.PropId.Sharpness">
            <summary>
                Controls the strength of the sharpness algorithm.
            </summary>
        </member>
        <member name="F:ic4.PropId.SidebandUse">
            <summary>
                Enables Trigger/Strobe over USB-C Sideband Use Pins
            </summary>
        </member>
        <member name="F:ic4.PropId.SignalDetected">
            <summary>
                Indicates whether a signal is detected form the HDMI source.
            </summary>
        </member>
        <member name="F:ic4.PropId.SoftwareTransformEnable">
            <summary>
                Enables Software Transform properties. If enabled, properties like Sharpness, Tone Mapping etc. can be enabled and lead to a software transformation in the driver.
            </summary>
        </member>
        <member name="F:ic4.PropId.SourceConnected">
            <summary>
                Indicates whether a HDMI source is connected.
            </summary>
        </member>
        <member name="F:ic4.PropId.StrobeDelay">
            <summary>
                Configures the delay from start of exposure to the generated strobe pulse.
            </summary>
        </member>
        <member name="F:ic4.PropId.StrobeDuration">
            <summary>
                If StrobeOperation is FixedDuration, specifies the pulse length.
            </summary>
        </member>
        <member name="F:ic4.PropId.StrobeEnable">
            <summary>
                Enable generation of exposure-synchronized output pulses
            </summary>
        </member>
        <member name="F:ic4.PropId.StrobeOperation">
            <summary>
                Configures the mode of specifying the length of exposure-synchronized output pulses
            </summary>
        </member>
        <member name="F:ic4.PropId.StrobePolarity">
            <summary>
                Select level of exposure-synchronized output pulses
            </summary>
        </member>
        <member name="F:ic4.PropId.TestEventGenerate">
            <summary>
                Generates a Test event that can be used for testing event notification.
            </summary>
        </member>
        <member name="F:ic4.PropId.TestPendingAck">
            <summary>
                Tests the device's pending acknowledge feature.
            </summary>
        </member>
        <member name="F:ic4.PropId.TimestampLatch">
            <summary>
                Latches the current timestamp counter into TimestampLatchValue.
            </summary>
        </member>
        <member name="F:ic4.PropId.TimestampLatchString">
            <summary>
                Human-readable interpretation of the latched timestamp.
            </summary>
        </member>
        <member name="F:ic4.PropId.TimestampLatchValue">
            <summary>
                Returns the latched value of the timestamp counter. The timestamp must first be latched by using the Timestamp Control Latch command.
            </summary>
        </member>
        <member name="F:ic4.PropId.TimestampReset">
            <summary>
                Resets the current value of the device timestamp counter. After executing this command, the timestamp counter restarts automatically.
            </summary>
        </member>
        <member name="F:ic4.PropId.TLParamsLocked">
            <summary>
                Used by the Transport Layer to prevent critical features from changing during acquisition.
            </summary>
        </member>
        <member name="F:ic4.PropId.ToneMappingEnable">
            <summary>
                Enables tone mapping.
            </summary>
        </member>
        <member name="F:ic4.PropId.ToneMappingGlobalBrightness">
            <summary>
                Changes the brightness reference used for a individual pixel, which is interpolated between local and global.
            </summary>
        </member>
        <member name="F:ic4.PropId.ToneMappingIntensity">
            <summary>
                Adjusts the intensity of the tonemapping algorithm.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerActivation">
            <summary>
                Specifies the activation mode of the trigger
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerDebouncer">
            <summary>
                Specifies the time for which trigger input has to be low in order accept the next trigger signal.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerDelay">
            <summary>
                Specifies the delay to apply after the trigger reception before activating it.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerDenoise">
            <summary>
                Specifies the time for which trigger input has to be high in order to be accepted as a trigger signal.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerMask">
            <summary>
                Specifies the time for which trigger pulses are ignored after accepting a trigger signal.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerMode">
            <summary>
                Controls if the selected trigger is active.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerOperation">
            <summary>
                Controls the operation mode of the sensor in trigger mode.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerOverlap">
            <summary>
                Specifies the type trigger overlap permitted with the previous frame. This defines when a valid trigger will be accepted for a new frame.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerSelector">
            <summary>
                Selects the type of trigger to configure.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerSoftware">
            <summary>
                Generates an internal trigger. TriggerSource must be set to Software or Any.
            </summary>
        </member>
        <member name="F:ic4.PropId.TriggerSource">
            <summary>
                Specifies the internal signal or physical input Line to use as the trigger source.
            </summary>
        </member>
        <member name="F:ic4.PropId.UserSetDefault">
            <summary>
                Selects the feature User Set to load and make active by default when the device is reset.
            </summary>
        </member>
        <member name="F:ic4.PropId.UserSetLoad">
            <summary>
                Loads the User Set specified by UserSetSelector to the device and makes it active.
            </summary>
        </member>
        <member name="F:ic4.PropId.UserSetSave">
            <summary>
                Save the User Set specified by UserSetSelector to the non-volatile memory of the device.
            </summary>
        </member>
        <member name="F:ic4.PropId.UserSetSelector">
            <summary>
                Selects the feature User Set to load, save or configure.
            </summary>
        </member>
        <member name="F:ic4.PropId.Width">
            <summary>
                Width of the image provided by the device (in pixels).
            </summary>
        </member>
        <member name="F:ic4.PropId.WidthMax">
            <summary>
                Maximum width of the image (in pixels). The dimension is calculated after horizontal binning, decimation or any other function changing the horizontal dimension of the image.
            </summary>
        </member>
        <member name="F:ic4.PropId.Zoom">
            <summary>
                Changes the zoom setting of the lens.
            </summary>
        </member>
        <member name="T:ic4.PropertyMap">
            <summary>
                Represents the property interface of a component, usually a video capture device.
            </summary>
            <remarks>
                <para>
                    A property map offers quick access to known properties as well as functions to enumerate all features through the category tree.
                </para>
                <para>
                    There is a plethora of overloaded functions to access properties with a known name and type. For example,
                    to find a known integer property, use:
                    <list type="bullet">
                        <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdInteger)"/></item>
                        <item><see cref="M:ic4.PropertyMap.FindInteger(System.String)"/></item>
                        <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdInteger,ic4.PropInteger@)"/></item>
                        <item><see cref="M:ic4.PropertyMap.TryFindInteger(System.String,ic4.PropInteger@)"/></item>
                    </list>
                    To find a property with a known name, but unknown type, use one of the untyped functions:
                    <list type="bullet">
                        <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                        <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                    </list>
                    Property values for known properties can also be set directly, for example by calling:
                    <list type="bullet">
                        <item><see cref="M:ic4.PropertyMap.SetValue(System.String,System.Int64)"/></item>
                        <item><see cref="M:ic4.PropertyMap.SetValue(System.String,System.Double)"/></item>
                        <item><see cref="M:ic4.PropertyMap.SetValue(ic4.PropIdBoolean,System.Boolean)"/></item>
                        <item><see cref="M:ic4.PropertyMap.SetValue(ic4.PropIdEnumeration,System.String)"/></item>
                    </list>
                </para>
                <para>
                    To get a flat list of all properties in the property map's category tree, enumerate <see cref="P:ic4.PropertyMap.All"/>.
                </para>
                <para>
                    The current values of all properties in a property map can be saved to a file or a memory buffer using
                    <see cref="M:ic4.PropertyMap.Serialize"/> or one of its overloads.
                    To restore the settings at a later time, call <see cref="M:ic4.PropertyMap.DeSerialize(System.Byte[])"/>.
                </para>
                <para>
                    An image buffer containing chunk data can be connected to a property map using
                    <see cref="M:ic4.PropertyMap.ConnectChunkData(ic4.ImageBuffer)"/>. Doing so lets
                    the property map uses the image buffer as the data source for chunk property read operations.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.ExecuteCommand(System.String)">
            <summary>
                Executes a command with a known name.
            </summary>
            <param name="commandName">Name of a command in this property map</param>
            <exception cref="T:System.ArgumentNullException">
                <c>commandName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.ExecuteCommand(ic4.PropIdCommand)">
            <summary>
                Executes a command with a specified identifier.
            </summary>
            <param name="commandId">Identifier of a command in this property map</param>
            <exception cref="T:System.ArgumentNullException">
                <c>commandId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(System.String,System.Int64)">
            <summary>
                Set the value of a property with a known name to the passed integer value.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The behavior depends on the type of the property:
                    <list type="bullet">
                        <item>For integer properties, the value is set directly.</item>
                        <item>For float properties, the value is set directly.</item>
                        <item>For boolean properties, if the value is <c>1</c> or <c>0</c>, it is set to <c>true</c> or <c>false</c> respectively. Other values result in an error.</item>
                        <item>For enumeration properties, the value is set directly.</item>
                        <item>For command properties, the command is executed if the value is <c>1</c>.</item>
                        <item>For all other property types, the call results in an error.</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(System.String,System.Double)">
            <summary>
                Set the value of a property with a known name to the passed double value.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The behavior depends on the type of the property:
                    <list type="bullet">
                        <item>For integer properties, the value is rounded to the nearest integer.</item>
                        <item>For float properties, the value is set directly.</item>
                        <item>For all other property types, the call results in an error.</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(System.String,System.Boolean)">
            <summary>
                Set the value of a property with a known name to the passed bool value.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The behavior depends on the type of the property:
                    <list type="bullet">
                        <item>For boolean properties, the value is set directly.</item>
                        <item>
                            For enumeration properties, it selects the entry with a name that unambiguously suggests
                            to represent <c>true</c> or <c>false</c>, if available.
                        </item>
                        <item>
                            For command properties, the command is executed if <c>value</c> is <c>true</c>.
                        </item>
                        <item>
                            For all other property types, the call results in an error.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(System.String,System.String)">
            <summary>
                Set the value of a property with a known name to the passed string value.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c> or <c>value</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The behavior depends on the type of property:
                    <list type="bullet">
                        <item>For integer properties, the string is parsed, and the found integer value is set.</item>
                        <item>For float properties, the string is parsed, and the found floating-point value is set.</item>
                        <item>For boolean properties, a value is set if the string can be unambiguously identified to represent <c>true</c> or <c>false</c>.</item>
                        <item>For enumeration properties, the entry with a naming matching the value is set.</item>
                        <item>For string properties, the value is set directly.</item>
                        <item>For command properties, the command is executed if <c>value</c> is <c>"1"</c>, <c>"true"</c> or <c>"execute"</c>.</item>
                        <item>For all other property types, the call results in an error.</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdInteger,System.Int64)">
            <summary>
                Set the value of an integer property with specified identifier to the passed integer value.
            </summary>
            <param name="integerId">Identifier of an integer property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>integerId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdEnumeration,ic4.PixelFormat)">
            <summary>
                Selects the current entry of an enumeration property to a <see cref="T:ic4.PixelFormat" /> value.
            </summary>
            <param name="enumerationId">Identifier of an enumeration property in this property map, usually <see cref="F:ic4.PropId.PixelFormat" /></param>
            <param name="pixelFormat">The pixel format to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>enumerationId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                This overload exists to avoid a cast when configuring the pixelformat.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdFloat,System.Double)">
            <summary>
                Set the value of a float property with specified identifier to the passed double value.
            </summary>
            <param name="floatId">Identifier of a float property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>floatId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdBoolean,System.Boolean)">
            <summary>
                Set the value of a boolean property with specified identifier to the passed bool value.
            </summary>
            <param name="boolId">Identifier of a boolean property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>floatId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdEnumeration,System.Boolean)">
            <summary>
                Selects an entry in the enumeration property with specified identifier matching the passed bool value.
            </summary>
            <param name="enumerationId">Identifier of an enumeration property in this property map, usually <see cref="F:ic4.PropId.PixelFormat" /></param>
            <param name="value">The new value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>enumerationId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                An entry is only selected if there is an entry with a name that unambiguously suggests to represent @c true or @c false.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdString,System.String)">
            <summary>
                Set the value of a string property with a specified identifier to the passed string value.
            </summary>
            <param name="stringId">Identifier of a string property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>stringId</c> is <c>null</c> or <c>value</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdEnumeration,System.String)">
            <summary>
                Selects the current entry of an enumeration property by its name.
            </summary>
            <param name="enumerationId">Identifier of an enumeration property in this property map</param>
            <param name="entryName">Name of the entry to be selected</param>
            <exception cref="T:System.ArgumentNullException">
                <c>enumerationId</c> is <c>null</c> or <c>entryName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.SetValue(ic4.PropIdBoolean,System.String)">
            <summary>
                Set the value of a boolean property with a specified identifier to the passed string value.
            </summary>
            <param name="boolId">Identifier of a boolean property in this property map</param>
            <param name="value">New value to be set</param>
            <exception cref="T:System.ArgumentNullException">
                <c>floatId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                The value is set if the string can be unambiguously identified to represent @c true or @c false.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.GetValueLong(System.String)">
            <summary>
                Get the value of a property with a known name interpreted as an integer.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>The value of the property interpreted as an integer.</returns>
            <remarks>
                The behavior depends on the type of the property:
                <list type="bullet">
                    <item>For integer properties, the value is returned directly.</item>
                    <item>For boolean properties, the value returned is <c>1</c> or <c>0</c>.</item>
                    <item>
                        For all other property types, the call results in an error. (<see cref="T:ic4.IC4Exception" />
                        with <see cref="P:ic4.IC4Exception.ErrorCode" /> set to <see cref="F:ic4.ErrorCode.GenICamTypeMismatch" />.)
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.GetValueDouble(System.String)">
            <summary>
                Get the value of a property with a known name interpreted as a double.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>The value of the property interpreted as a double.</returns>
            <remarks>
                The behavior depends on the type of the property:
                <list type="bullet">
                    <item>For float properties, the value is returned directly.</item>
                    <item>For integer properties, the value is converted to double.</item>
                    <item>
                        For all other property types, the call results in an error. (<see cref="T:ic4.IC4Exception" />
                        with <see cref="P:ic4.IC4Exception.ErrorCode" /> set to <see cref="F:ic4.ErrorCode.GenICamTypeMismatch" />.)
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.GetValueBool(System.String)">
            <summary>
                Get the value of a property with a known name interpreted as a bool.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>The value of the property interpreted as a bool.</returns>
            <remarks>
                The behavior depends on the type of the property:
                <list type="bullet">
                    <item>For boolean properties, the value is returned directly.</item>
                    <item>
                        For enumeration properties, a value is returned if the name of the currently selected
                        entry unambiguously suggests to represent <c>true</c> or <c>false</c>.
                    </item>
                    <item>
                        For all other property types, the call results in an error. (<see cref="T:ic4.IC4Exception" />
                        with <see cref="P:ic4.IC4Exception.ErrorCode" /> set to <see cref="F:ic4.ErrorCode.GenICamTypeMismatch" />.)
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.GetValueString(System.String)">
            <summary>
                Get the value of a property with a known name interpreted as a string.
            </summary>
            <param name="propName">Name of a property in this property map</param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>The value of the property interpreted as a string.</returns>
            <remarks>
                The behavior depends on the type of the property:
                <list type="bullet">
                    <item>For integer properties, the value is converted to a string.</item>
                    <item>For float properties, the value is converted to a string.</item>
                    <item>For boolean properties, the returned value is <c>"true"</c> or <c>"false"</c>.</item>
                    <item>For enumeration properties, the name of the currently selected entry is returned.</item>
                    <item>For string properties, the value is returned directly.</item>
                    <item>
                        For all other property types, the call results in an error. (<see cref="T:ic4.IC4Exception" />
                        with <see cref="P:ic4.IC4Exception.ErrorCode" /> set to <see cref="F:ic4.ErrorCode.GenICamTypeMismatch" />.)
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.GetValueLong(ic4.PropIdInteger)">
            <summary>
                Gets the value of an integer property with a specific identifier.
            </summary>
            <param name="integerId">Identifier of an integer property in this property map</param>
            <returns>The value of the integer property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="integerId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueLong(ic4.PropIdBoolean)">
            <summary>
                Gets an integer-representation of a boolean property with a specific identifier.
            </summary>
            <param name="booleanId">Identifier of an integer property in this property map</param>
            <returns><c>1</c> if the property's value is <c>true</c>, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="booleanId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueLong(ic4.PropIdEnumeration)">
            <summary>
                Gets the currently selected pixel format if the passed enumeration property it <c>PixelFormat</c>.
            </summary>
            <param name="enumerationId">Identifier of a enumeration property in this property map</param>
            <returns>The integer value of the currently selected entry converted into a <see cref="T:ic4.PixelFormat" /> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerationId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueDouble(ic4.PropIdInteger)">
            <summary>
                Gets the value of an integer property with a specific identifier, converted to <c>double</c>.
            </summary>
            <param name="integerId">Identifier of an integer property in this property map</param>
            <returns>The value of the integer property converted to <c>double</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="integerId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueDouble(ic4.PropIdFloat)">
            <summary>
                Gets the value of a float property with a specific identifier.
            </summary>
            <param name="floatId">Identifier of a float property in this property map</param>
            <returns>The value of the float property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="floatId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueBool(ic4.PropIdBoolean)">
            <summary>
                Gets the value of a boolean property with a specific identifier.
            </summary>
            <param name="booleanId">Identifier of a boolean property in this property map</param>
            <returns>The value of the boolean property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="booleanId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueBool(ic4.PropIdEnumeration)">
            <summary>
                Gets a boolean representation of the value of an enumeration property with a specific identifier.
            </summary>
            <param name="enumerationId">Identifier of an enumeration property in this property map</param>
            <returns>The value of the enumeration property interpreted as a boolean value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerationId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                A value is returned if the name of the currently selected entry unambiguously
                suggests to represent <c>true</c> or <c>false</c>.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.GetValueString(ic4.PropIdInteger)">
            <summary>
                Returns a string representation for the value of the integer property with a specific identifier.
            </summary>
            <param name="integerId">Identifier of an integer property in this property map</param>
            <returns>A string representation of the value of the integer property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="integerId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueString(ic4.PropIdFloat)">
            <summary>
                Returns a string representation for the value of the float property with a specific identifier.
            </summary>
            <param name="floatId">Identifier of a float property in this property map</param>
            <returns>A string representation of the value of the float property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="floatId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueString(ic4.PropIdBoolean)">
            <summary>
                Returns a string representation for the value of the boolean property with a specific identifier.
            </summary>
            <param name="booleanId">Identifier of a boolean property in this property map</param>
            <returns>A string representation of the value of the boolean property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="booleanId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueString(ic4.PropIdEnumeration)">
            <summary>
                Returns a string representation for the value of the enumeration property with a specific identifier.
            </summary>
            <param name="enumerationId">Identifier of an enumeration property in this property map</param>
            <returns>A string representation of the value of the enumeration property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerationId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.GetValueString(ic4.PropIdString)">
            <summary>
                Returns a string representation for the value of the string property with a specific identifier.
            </summary>
            <param name="stringId">Identifier of a string property in this property map</param>
            <returns>A string representation of the value of the string property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stringId" /> is <c>null</c>.</exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.ConnectChunkData(ic4.ImageBuffer)">
            <summary>
                Enables the use of the chunk data in the passed <see cref="T:ic4.ImageBuffer"/> as a backend for chunk properties
                in the property map.
            </summary>
            <param name="buffer">
                An image buffer with chunk data.
                This parameter may be <c>null</c> to disconnect the previously connected buffer.
            </param>
            <remarks>
                <para>
                    The property map takes a reference to the passed image buffer, extending its lifetime and preventing automatic reuse.
                    The reference is released when a new image buffer is connected to the property map, or <c>null</c> is
                    passed in the <c>buffer</c> argument.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)">
            <summary>
                Tries to find a property with a given name in this property map.
            </summary>
            <param name="propName">Name of the property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(System.String)">
            <summary>
                Returns the property with a given name.
            </summary>
            <param name="propName">
                The name of the property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(System.String)">
            <summary>
                Returns the property with a given name.
            </summary>
            <param name="propName">
                The name of the property to return
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(System.String)" />
                </para>
                <para>
                    If there is no property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindCommand(System.String)">
            <summary>
                Returns the command property with a given name.
            </summary>
            <param name="propName">
                The name of the command property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The command property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no command property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindCommand(System.String,ic4.PropCommand@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindInteger(System.String)">
            <summary>
                Returns the integer property with a given name.
            </summary>
            <param name="propName">
                The name of the integer property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The integer property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no integer property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindInteger(System.String,ic4.PropInteger@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindFloat(System.String)">
            <summary>
                Returns the float property with a given name.
            </summary>
            <param name="propName">
                The name of the float property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The float property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no float property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindFloat(System.String,ic4.PropFloat@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindBoolean(System.String)">
            <summary>
                Returns the boolean property with a given name.
            </summary>
            <param name="propName">
                The name of the boolean property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The boolean property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no boolean property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindBoolean(System.String,ic4.PropBoolean@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindEnumeration(System.String)">
            <summary>
                Returns the enumeration property with a given name.
            </summary>
            <param name="propName">
                The name of the enumeration property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The enumeration property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no enumeration property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindEnumeration(System.String,ic4.PropEnumeration@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindString(System.String)">
            <summary>
                Returns the string property with a given name.
            </summary>
            <param name="propName">
                The name of the string property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The string property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no string property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindString(System.String,ic4.PropString@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindRegister(System.String)">
            <summary>
                Returns the register property with a given name.
            </summary>
            <param name="propName">
                The name of the register property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The register property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no register property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindRegister(System.String,ic4.PropRegister@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.FindCategory(System.String)">
            <summary>
                Returns the category property with a given name.
            </summary>
            <param name="propName">
                The name of the category property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>propName</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The category property whose name is equal to <c>propName</c>
            </returns>
            <remarks>
                <para>
                    If there is no category property with the the given name in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFindCategory(System.String,ic4.PropCategory@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindCommand(System.String,ic4.PropCommand@)">
            <summary>
                Tries to find a command property with a given name in this property map.
            </summary>
            <param name="propName">Name of the command property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindCommand(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindInteger(System.String,ic4.PropInteger@)">
            <summary>
                Tries to find an integer property with a given name in this property map.
            </summary>
            <param name="propName">Name of the integer property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindInteger(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindFloat(System.String,ic4.PropFloat@)">
            <summary>
                Tries to find a float property with a given name in this property map.
            </summary>
            <param name="propName">Name of the float property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindFloat(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindBoolean(System.String,ic4.PropBoolean@)">
            <summary>
                Tries to find a boolean property with a given name in this property map.
            </summary>
            <param name="propName">Name of the boolean property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindBoolean(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindEnumeration(System.String,ic4.PropEnumeration@)">
            <summary>
                Tries to find an enumeration property with a given name in this property map.
            </summary>
            <param name="propName">Name of the enumeration property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindEnumeration(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindString(System.String,ic4.PropString@)">
            <summary>
                Tries to find a string property with a given name in this property map.
            </summary>
            <param name="propName">Name of the string property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindString(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindRegister(System.String,ic4.PropRegister@)">
            <summary>
                Tries to find a register property with a given name in this property map.
            </summary>
            <param name="propName">Name of the register property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindRegister(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFindCategory(System.String,ic4.PropCategory@)">
            <summary>
                Tries to find a category property with a given name in this property map.
            </summary>
            <param name="propName">Name of the category property</param>
            <param name="prop">Output parameter receiving the property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.FindCategory(System.String)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdCommand)">
            <summary>
                Returns the command property with a specified identifier.
            </summary>
            <param name="commandId">
                The identifier of the command property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>commandId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The command property matching the identifier <c>commandId</c>
            </returns>
            <remarks>
                <para>
                    If there is no command property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdCommand,ic4.PropCommand@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdInteger)">
            <summary>
                Returns the integer property with a specified identifier.
            </summary>
            <param name="integerId">
                The identifier of the integer property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>integerId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The integer property matching the identifier <c>integerId</c>
            </returns>
            <remarks>
                <para>
                    If there is no integer property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdInteger,ic4.PropInteger@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdFloat)">
            <summary>
                Returns the float property with a specified identifier.
            </summary>
            <param name="floatId">
                The identifier of the float property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>floatId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The float property matching the identifier <c>floatId</c>
            </returns>
            <remarks>
                <para>
                    If there is no float property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdFloat,ic4.PropFloat@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdBoolean)">
            <summary>
                Returns the boolean property with a specified identifier.
            </summary>
            <param name="booleanId">
                The identifier of the boolean property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>booleanId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The boolean property matching the identifier <c>booleanId</c>
            </returns>
            <remarks>
                <para>
                    If there is no boolean property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdBoolean,ic4.PropBoolean@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdEnumeration)">
            <summary>
                Returns the enumeration property with a specified identifier.
            </summary>
            <param name="enumerationId">
                The identifier of the enumeration property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>enumerationId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The enumeration property matching the identifier <c>enumerationId</c>
            </returns>
            <remarks>
                <para>
                    If there is no enumeration property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdEnumeration,ic4.PropEnumeration@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdString)">
            <summary>
                Returns the string property with a specified identifier.
            </summary>
            <param name="stringId">
                The identifier of the string property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>stringId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The string property matching the identifier <c>stringId</c>
            </returns>
            <remarks>
                <para>
                    If there is no string property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdString,ic4.PropString@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Find(ic4.PropIdRegister)">
            <summary>
                Returns the register property with a specified identifier.
            </summary>
            <param name="registerId">
                The identifier of the register property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>registerId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The register property matching the identifier <c>registerId</c>
            </returns>
            <remarks>
                <para>
                    If there is no register property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdRegister,ic4.PropRegister@)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdCommand,ic4.PropCommand@)">
            <summary>
                Tries to find a command property with a specifier.
            </summary>
            <param name="commandId">The identifier of the command property to find</param>
            <param name="prop">Output parameter receiving the command property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdCommand)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdInteger,ic4.PropInteger@)">
            <summary>
                Tries to find an integer property with a specifier.
            </summary>
            <param name="integerId">The identifier of the integer property to find</param>
            <param name="prop">Output parameter receiving the integer property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdInteger)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdFloat,ic4.PropFloat@)">
            <summary>
                Tries to find a float property with a specifier.
            </summary>
            <param name="floatId">The identifier of the float property to find</param>
            <param name="prop">Output parameter receiving the float property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdFloat)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdBoolean,ic4.PropBoolean@)">
            <summary>
                Tries to find a boolean property with a specifier.
            </summary>
            <param name="booleanId">The identifier of the boolean property to find</param>
            <param name="prop">Output parameter receiving the boolean property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdBoolean)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdEnumeration,ic4.PropEnumeration@)">
            <summary>
                Tries to find an enumeration property with a specifier.
            </summary>
            <param name="enumerationId">The identifier of the enumeration property to find</param>
            <param name="prop">Output parameter receiving the enumeration property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdEnumeration)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdString,ic4.PropString@)">
            <summary>
                Tries to find a string property with a specifier.
            </summary>
            <param name="stringId">The identifier of the string property to find</param>
            <param name="prop">Output parameter receiving the string property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdString)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.TryFind(ic4.PropIdRegister,ic4.PropRegister@)">
            <summary>
                Tries to find a register property with a specifier.
            </summary>
            <param name="registerId">The identifier of the register property to find</param>
            <param name="prop">Output parameter receiving the register property object on success</param>
            <returns>
                <c>true</c>, if the property was found, otherwise <c>false</c>
            </returns>
            <remarks>
                Use this function instead of <see cref="M:ic4.PropertyMap.Find(ic4.PropIdRegister)"/> to avoid an exception being thrown
                if an error occurs.
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdCommand)">
            <summary>
                Returns the command property with a specified identifier.
            </summary>
            <param name="commandId">
                The identifier of the command property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>commandId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The command property matching the identifier <c>commandId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdCommand)" />
                </para>
                <para>
                    If there is no command property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdCommand,ic4.PropCommand@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdInteger)">
            <summary>
                Returns the integer property with a specified identifier.
            </summary>
            <param name="integerId">
                The identifier of the integer property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>integerId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The integer property matching the identifier <c>integerId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdInteger)" />
                </para>
                <para>
                    If there is no integer property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdInteger,ic4.PropInteger@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdFloat)">
            <summary>
                Returns the float property with a specified identifier.
            </summary>
            <param name="floatId">
                The identifier of the float property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>floatId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The float property matching the identifier <c>floatId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdFloat)" />
                </para>
                <para>
                    If there is no float property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdFloat,ic4.PropFloat@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdBoolean)">
            <summary>
                Returns the boolean property with a specified identifier.
            </summary>
            <param name="booleanId">
                The identifier of the boolean property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>booleanId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The boolean property matching the identifier <c>booleanId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdBoolean)" />
                </para>
                <para>
                    If there is no boolean property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdBoolean,ic4.PropBoolean@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdEnumeration)">
            <summary>
                Returns the enumeration property with a specified identifier.
            </summary>
            <param name="enumerationId">
                The identifier of the enumeration property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>enumerationId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The enumeration property matching the identifier <c>enumerationId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdEnumeration)" />
                </para>
                <para>
                    If there is no enumeration property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdEnumeration,ic4.PropEnumeration@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdString)">
            <summary>
                Returns the string property with a specified identifier.
            </summary>
            <param name="stringId">
                The identifier of the string property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>stringId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The string property matching the identifier <c>stringId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdString)" />
                </para>
                <para>
                    If there is no string property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdString,ic4.PropString@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.Item(ic4.PropIdRegister)">
            <summary>
                Returns the register property with a specified identifier.
            </summary>
            <param name="registerId">
                The identifier of the register property to find
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>registerId</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <returns>
                The register property matching the identifier <c>registerId</c>
            </returns>
            <remarks>
                <para>
                    This is a shortcut for calling <see cref="M:ic4.PropertyMap.Find(ic4.PropIdRegister)" />
                </para>
                <para>
                    If there is no register property matching the identifier in this property map, an <see cref="T:ic4.IC4Exception" /> is thrown.
                </para>
                <para>
                    To avoid an exception being thrown in case the property is not found, use <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdRegister,ic4.PropRegister@)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropertyMap.All">
            <summary>
                Enumerates all properties reachable from the property map's <c>Root</c> category.
            </summary>
            <value>
                An enumeration of <see cref="T:ic4.Property" /> objects for all properties reachable from this property map's <c>Root</c> category.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.Serialize">
            <summary>
                Saves the state of the properties in this property map in a memory buffer.
            </summary>
            <returns>
                A byte array containing the serialized property state
            </returns>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                To restore the state of the properties at a later time, use <see cref="M:ic4.PropertyMap.DeSerialize(System.Byte[])" />.
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Serialize(System.IO.Stream)">
            <summary>
                Saves the state of the properties in this property map in a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="strm">
                Stream to write the property state to
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>strm</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    To restore the state of the properties at a later time, use <see cref="M:ic4.PropertyMap.DeSerialize(System.IO.Stream)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.Serialize(System.String)">
            <summary>
                Saves the state of the properties in this property map in a file.
            </summary>
            <param name="fileName">
                Path to the file to write the property state to
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>fileName</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    To restore the state of the properties at a later time, use <see cref="M:ic4.PropertyMap.DeSerialize(System.String)" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropertyMap.DeSerialize(System.Byte[])">
            <summary>
                Restores the state of the properties in this property map from a memory buffer containing data that was previously written by <see cref="M:ic4.PropertyMap.Serialize" />.
            </summary>
            <param name="data">
                A byte array containing serialized property data
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>data</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.DeSerialize(System.IO.Stream)">
            <summary>
                Restores the state of the properties in this property map from a stream that was previously written by <see cref="M:ic4.PropertyMap.Serialize(System.IO.Stream)" />.
            </summary>
            <param name="strm">
                A stream containing serialized property data
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>strm</c> is <c>null</c>.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.PropertyMap.DeSerialize(System.String)">
            <summary>
                Restores the state of the properties in this property map from a file that was previously written by <see cref="M:ic4.PropertyMap.Serialize(System.String)" />.
            </summary>
            <param name="fileName">
                Path to a file containing serialized property data
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>fileName</c> is <c>null</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.DisplayNotation">
            <summary>
                Defines the possible float property display notations
            </summary>
            <remarks>
                Each float property has a display notation hint that can help creating more useful user interfaces.
            </remarks>
        </member>
        <member name="F:ic4.DisplayNotation.Automatic">
            <summary>
                Use an automatic mechanism to determine the best display notation
            </summary>
        </member>
        <member name="F:ic4.DisplayNotation.Fixed">
            <summary>
                Suggest fixed point notation
            </summary>
        </member>
        <member name="F:ic4.DisplayNotation.Scientific">
            <summary>
                Suggest scientific notation
            </summary>
        </member>
        <member name="T:ic4.FloatRepresentation">
            <summary>
                Defines the possible float property representations
            </summary>
            <remarks>
                Each float property has a representation hint that can help creating more useful user interfaces.
            </remarks>
        </member>
        <member name="F:ic4.FloatRepresentation.Linear">
            <summary>
                Suggest a slider with linear mapping to edit the value
            </summary>
        </member>
        <member name="F:ic4.FloatRepresentation.Logarithmic">
            <summary>
                Suggest a slider with logarithmic mapping to edit the value
            </summary>
        </member>
        <member name="F:ic4.FloatRepresentation.PureNumber">
            <summary>
                Suggest displaying a number to edit
            </summary>
        </member>
        <member name="T:ic4.PropFloat">
            <summary>
                Float properties represent a feature whose value is a floating-point number.
            </summary>
            <remarks>
                <para>
                    Common examples for a float properties are <c>AcquisitionFrameRate</c>, <c>ExposureTime</c> or <c>Gain</c>.
                </para>
                <para>
                    A float property can limit the range of valid values.
                    The range of possible values can be queried by reading <see cref="P:ic4.PropFloat.Minimum"/> and <see cref="P:ic4.PropFloat.Maximum"/>.
                </para>
                <para>
                    The possible values can be further restricted by an increment value or a set of value values.
                    Check <see cref="P:ic4.PropFloat.IncrementMode"/>, <see cref="P:ic4.PropFloat.Increment"/> and <see cref="P:ic4.PropFloat.ValidValueSet"/>.
                </para>
                <para>
                    A float property supplies hints that can be useful when creating a user interface:
                    <list type="bullet">
                        <item>A <see cref="P:ic4.PropFloat.Representation"/></item>
                        <item>A <see cref="P:ic4.PropFloat.Unit"/></item>
                        <item><see cref="P:ic4.PropFloat.DisplayNotation"/> and <see cref="P:ic4.PropFloat.DisplayPrecision"/></item>
                    </list>
                </para>
                <para>
                    PropFloat instances are created in multiple ways:
                    <list type="bullet">
                        <item>
                            By directly querying a <see cref="T:ic4.PropertyMap"/> for a float property:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdFloat)"/></item>
                                <item><see cref="M:ic4.PropertyMap.FindFloat(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdFloat,ic4.PropFloat@)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFindFloat(System.String,ic4.PropFloat@)"/></item>
                            </list>
                        </item>
                        <item>
                            By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                            generic property objects:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                                <item><see cref="P:ic4.PropCategory.Features"/></item>
                                <item><see cref="P:ic4.PropertyMap.All"/></item>
                                <item><see cref="P:ic4.Property.SelectedProperties"/></item>
                            </list>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropFloat.IncrementMode">
            <summary>
                Indicates how this float property restricts which values are valid between its minimum and maximum value.
            </summary>
            <value>
                The property's increment mode
            </value>
            <remarks>
                A float property has 1 of 3 possible increment modes:
                <list type="table">
                    <listheader>
                        <term>Increment mode</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term><see cref="F:ic4.PropertyIncrementMode.None"/></term>
                        <description>
                            The property has no restrictions, all values between <see cref="P:ic4.PropFloat.Minimum"/> and <see cref="P:ic4.PropFloat.Maximum"/> can be set.
                        </description>
                    </item>
                    <item>
                        <term><see cref="F:ic4.PropertyIncrementMode.Increment"/></term>
                        <description>
                            Only multiples of <see cref="P:ic4.PropFloat.Increment"/> can be set.
                        </description>
                    </item>
                    <item>
                        <term><see cref="F:ic4.PropertyIncrementMode.ValueSet"/></term>
                        <description>
                            Only values that are part of <see cref="P:ic4.PropFloat.ValidValueSet"/> can be set.
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:ic4.PropFloat.Increment">
            <summary>
                The step size for valid values accepted by this float property
            </summary>
            <value>
                The step size for valid values accepted by this float property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The increment restricts the set of valid values for a float property.
                </para>
                <para>
                    For example, if the property's minimum value is <c>0</c>, the maximum is <c>10</c>,
                    and the increment is <c>0.5</c>, <c>0.25</c> is not a valid value for the property
                </para>
                <para>
                    Accessing Increment will throw an exception if <see cref="P:ic4.PropFloat.IncrementMode" /> is
                    not equal to <see cref="F:ic4.PropertyIncrementMode.Increment" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropFloat.Minimum">
            <summary>
                The minimum value accepted by this property.
            </summary>
            <value>
                The minimum value accepted by this property.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropFloat.Maximum">
            <summary>
                The maximum value accepted by this property.
            </summary>
            <value>
                The maximum value accepted by this property.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropFloat.Value">
            <summary>
                <para>
                    The current value of this property
                </para>
                <para>
                    The value is only writable is the property's writability is not restricted.
                    See <see cref="P:ic4.Property.IsLocked" />, <see cref="P:ic4.Property.IsReadonly" />, <see cref="P:ic4.Property.IsAvailable" />.
                </para>
            </summary>
            <value>
                The current value of this property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropFloat.DisplayNotation">
            <summary>
                A suggested display notation to use when displaying the float property's value
            </summary>
            <value>
                A suggested display notation to use when displaying the float property's value
            </value>
            <remarks>
                The display precision can be used as a hint when creating user interfaces
            </remarks>
        </member>
        <member name="P:ic4.PropFloat.Representation">
            <summary>
                The suggested representation for this float property
            </summary>
            <value>
                The suggested representation for this float property
            </value>
            <remarks>
                The representation can be used as a hint when creating user interfaces
            </remarks>
        </member>
        <member name="P:ic4.PropFloat.Unit">
            <summary>
                The unit of this float property
            </summary>
            <value>
                The unit of this float property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropFloat.DisplayPrecision">
            <summary>
                A suggested number of significant digits to use when displaying the float property's value
            </summary>
            <value>
                A suggested number of significant digits to use when displaying the float property's value
            </value>
            <remarks>
                The display precision can be used as a hint when creating user interfaces
            </remarks>
        </member>
        <member name="P:ic4.PropFloat.ValidValueSet">
            <summary>
                The set of valid values for this property
            </summary>
            <value>
                A list containing the values that are valid for this property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    Accessing Increment will throw an exception if <see cref="P:ic4.PropFloat.IncrementMode" /> is
                    not equal to <see cref="F:ic4.PropertyIncrementMode.ValueSet" />.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropFloat.TryGetValue(System.Double@)">
            <summary>
                Tries to get the current value of the property.
            </summary>
            <param name="val">
                Output parameter receiving the current value of the property on success
            </param>
            <returns>
                <c>true</c>, if the operation was successful, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    In contrast to reading the <see cref="P:ic4.PropFloat.Value"/> property directly, this method does not throw an exception
                    in case of an error.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropFloat.TrySetValue(System.Double)">
            <summary>
                Tries to set the current value of the property.
            </summary>
            <param name="val">
                The new value
            </param>
            <returns>
                <c>true</c>, if the operation was successful, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    In contrast to writing the <see cref="P:ic4.PropFloat.Value"/> property directly, this method does not throw an exception
                    in case of an error.
                </para>
            </remarks>
        </member>
        <member name="T:ic4.PropIdInteger">
            <summary>
                Typed property identifier for integer properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdInteger)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdInteger,ic4.PropInteger@)"/>
                    to find an integer property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdInteger.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.PropIdFloat">
            <summary>
                Typed property identifier for float properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdFloat)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdFloat,ic4.PropFloat@)"/>
                    to find a float property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdFloat.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.PropIdCommand">
            <summary>
                Typed property identifier for command properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdCommand)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdCommand,ic4.PropCommand@)"/>
                    to find a command property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdCommand.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.PropIdEnumeration">
            <summary>
                Typed property identifier for enumeration properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdEnumeration)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdEnumeration,ic4.PropEnumeration@)"/>
                    to find an enumeration property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdEnumeration.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.PropIdBoolean">
            <summary>
                Typed property identifier for boolean properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdBoolean)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdBoolean,ic4.PropBoolean@)"/>
                    to find a boolean property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdBoolean.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.PropIdString">
            <summary>
                Typed property identifier for string properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdString)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdString,ic4.PropString@)"/>
                    to find a string property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.PropIdRegister">
            <summary>
                Typed property identifier for register properties
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:ic4.PropertyMap.Find(ic4.PropIdRegister)"/> or <see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdRegister,ic4.PropRegister@)"/>
                    to find a register property by its identifier.
                </para>
                <para>
                    Property identifier constants for common properties are declared in <see cref="T:ic4.PropId"/>.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropIdRegister.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ic4.IntRepresentation">
            <summary>
                Defines the possible integer property representations.
            </summary>
            <remarks>
                Each integer property has a representation hint that can help creating more useful user interfaces.
            </remarks>
        </member>
        <member name="F:ic4.IntRepresentation.Linear">
            <summary>
                Suggest a slider to edit the value
            </summary>
        </member>
        <member name="F:ic4.IntRepresentation.Logarithmic">
            <summary>
                Suggest a slider with logarithmic mapping
            </summary>
        </member>
        <member name="F:ic4.IntRepresentation.Boolean">
            <summary>
                Suggest a checkbox
            </summary>
        </member>
        <member name="F:ic4.IntRepresentation.PureNumber">
            <summary>
                Suggest displaying a decimal number
            </summary>
        </member>
        <member name="F:ic4.IntRepresentation.HexNumber">
            <summary>
                Suggest displaying a hexadecimal number
            </summary>
        </member>
        <member name="F:ic4.IntRepresentation.IP4Address">
            <summary>
                Suggest treating the integer as a IPV4 address
            </summary>
        </member>
        <member name="F:ic4.IntRepresentation.MacAddress">
            <summary>
                Suggest treating the integer as a MAC address
            </summary>
        </member>
        <member name="T:ic4.PropInteger">
            <summary>
                Integer properties represent a feature whose value is an integer number.
            </summary>
            <remarks>
                <para>
                    Common examples for a integer properties are <c>Width</c> or <c>Height</c>.
                </para>
                <para>
                    An integer property can limit the range of valid values.
                    The range of possible values can be queried by reading <see cref="P:ic4.PropInteger.Minimum"/> and <see cref="P:ic4.PropInteger.Maximum"/>.
                </para>
                <para>
                    The possible values can be further restricted by an increment value or a set of value values.
                    Check <see cref="P:ic4.PropInteger.IncrementMode"/>, <see cref="P:ic4.PropInteger.Increment"/> and <see cref="P:ic4.PropInteger.ValidValueSet"/> for details.
                </para>
                <para>
                    An integer property property supplies hints that can be useful when creating a user interface:
                    <list type="bullet">
                        <item>A <see cref="P:ic4.PropInteger.Representation"/></item>
                        <item>A <see cref="P:ic4.PropInteger.Unit"/></item>
                    </list>
                </para>
                <para>
                    PropInteger instances are created in multiple ways:
                    <list type="bullet">
                        <item>
                            By directly querying a <see cref="T:ic4.PropertyMap"/> for a float property:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdInteger)"/></item>
                                <item><see cref="M:ic4.PropertyMap.FindInteger(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdInteger,ic4.PropInteger@)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFindInteger(System.String,ic4.PropInteger@)"/></item>
                            </list>
                        </item>
                        <item>
                            By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                            generic property objects:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                                <item><see cref="P:ic4.PropCategory.Features"/></item>
                                <item><see cref="P:ic4.PropertyMap.All"/></item>
                                <item><see cref="P:ic4.Property.SelectedProperties"/></item>
                            </list>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropInteger.TryGetValue(System.Int64@)">
            <summary>
                Tries to get the current value of the property.
            </summary>
            <param name="val">
                Output parameter receiving the current value of the property on success
            </param>
            <returns>
                <c>true</c>, if the operation was successful, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    In contrast to reading the <see cref="P:ic4.PropInteger.Value"/> property directly, this method does not throw an exception
                    in case of an error.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.PropInteger.TrySetValue(System.Int64)">
            <summary>
                Tries to set the current value of the property.
            </summary>
            <param name="val">
                The new value
            </param>
            <returns>
                <c>true</c>, if the operation was successful, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    In contrast to writing the <see cref="P:ic4.PropInteger.Value"/> property directly, this method does not throw an exception
                    in case of an error.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropInteger.Minimum">
            <summary>
                The minimum value accepted by this property.
            </summary>
            <value>
                The minimum value accepted by this property.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropInteger.Maximum">
            <summary>
                The maximum value accepted by this property.
            </summary>
            <value>
                The maximum value accepted by this property.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropInteger.Value">
            <summary>
                <para>
                    The current value of this property
                </para>
                <para>
                    The value is only writable is the property's writability is not restricted.
                    See <see cref="P:ic4.Property.IsLocked" />, <see cref="P:ic4.Property.IsReadonly" />, <see cref="P:ic4.Property.IsAvailable" />.
                </para>
            </summary>
            <value>
                The current value of this property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    If exceptions are not desired when accessing the value, use <see cref="M:ic4.PropInteger.TryGetValue(System.Int64@)" /> or <see cref="M:ic4.PropInteger.TrySetValue(System.Int64)" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropInteger.Representation">
            <summary>
                The suggested representation for this integer property
            </summary>
            <value>
                The suggested representation for this integer property
            </value>
            <remarks>
                The representation can be used as a hint when creating user interfaces
            </remarks>
        </member>
        <member name="P:ic4.PropInteger.Unit">
            <summary>
                The unit of this integer property
            </summary>
            <value>
                The unit of this integer property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.PropInteger.IncrementMode">
            <summary>
                Indicates how this float property restricts which values are valid between its minimum and maximum value.
            </summary>
            <value>
                The property's increment mode
            </value>
            <remarks>
                An integer property has 1 of 2 possible increment modes:
                <list type="table">
                    <listheader>
                        <term>Increment mode</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term><see cref="F:ic4.PropertyIncrementMode.Increment"/></term>
                        <description>
                            Only multiples of <see cref="P:ic4.PropInteger.Increment"/> can be set.
                        </description>
                    </item>
                    <item>
                        <term><see cref="F:ic4.PropertyIncrementMode.ValueSet"/></term>
                        <description>
                            Only values that are part of <see cref="P:ic4.PropInteger.ValidValueSet"/> can be set.
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:ic4.PropInteger.Increment">
            <summary>
                The step size for valid values accepted by this integer property
            </summary>
            <value>
                The step size for valid values accepted by this integer property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    The increment restricts the set of valid values for a integer property.
                </para>
                <para>
                    For example, if the property's minimum value is <c>0</c>, the maximum is <c>10</c>,
                    and the increment is <c>2</c>, <c>1</c> is not a valid value for the property
                </para>
                <para>
                    Accessing Increment will throw an exception if <see cref="P:ic4.PropInteger.IncrementMode" /> is
                    not equal to <see cref="F:ic4.PropertyIncrementMode.Increment" />.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropInteger.ValidValueSet">
            <summary>
                The set of valid values for this property
            </summary>
            <value>
                A list containing the values that are valid for this property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    Accessing Increment will throw an exception if <see cref="P:ic4.PropInteger.IncrementMode" /> is
                    not equal to <see cref="F:ic4.PropertyIncrementMode.ValueSet" />.
                </para>
            </remarks>
        </member>
        <member name="T:ic4.PropRegister">
            <summary>
                Register properties have a value represented by raw bytes.
            </summary>
            <remarks>
                <para>
                    PropRegister instances are created in multiple ways:
                    <list type="bullet">
                        <item>
                            By directly querying a <see cref="T:ic4.PropertyMap"/> for a register property:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdRegister)"/></item>
                                <item><see cref="M:ic4.PropertyMap.FindRegister(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdRegister,ic4.PropRegister@)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFindRegister(System.String,ic4.PropRegister@)"/></item>
                            </list>
                        </item>
                        <item>
                            By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                            generic property objects:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                                <item><see cref="P:ic4.PropCategory.Features"/></item>
                                <item><see cref="P:ic4.PropertyMap.All"/></item>
                                <item><see cref="P:ic4.Property.SelectedProperties"/></item>
                            </list>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropRegister.Size">
            <summary>
                The size of a register property
            </summary>
            <remarks>
                The size of a register property is not necessarily constant; it can change depending on the value of other properties.
            </remarks>
        </member>
        <member name="P:ic4.PropRegister.Value">
            <summary>
                <para>
                    The current value of the register
                </para>
                <para>
                    The value is only writable is the property's writability is not restricted.
                    See <see cref="P:ic4.Property.IsLocked" />, <see cref="P:ic4.Property.IsReadonly" />, <see cref="P:ic4.Property.IsAvailable" />.
                </para>
            </summary>
            <value>
                A byte array representing the register's contents
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.PropString">
            <summary>
                String properties represent features whose value is a text.
            </summary>
            <remarks>
                <para>
                    The maximum length of the text is indicated by <see cref="P:ic4.PropString.MaxLength"/>.
                </para>
                <para>
                    PropString instances are created in multiple ways:
                    <list type="bullet">
                        <item>
                            By directly querying a <see cref="T:ic4.PropertyMap"/> for a string property:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(ic4.PropIdString)"/></item>
                                <item><see cref="M:ic4.PropertyMap.FindString(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(ic4.PropIdString,ic4.PropString@)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFindString(System.String,ic4.PropString@)"/></item>
                            </list>
                        </item>
                        <item>
                            By casting a <see cref="T:ic4.Property"/> object obtained from one of the functions returning
                            generic property objects:
                            <list type="bullet">
                                <item><see cref="M:ic4.PropertyMap.Find(System.String)"/></item>
                                <item><see cref="M:ic4.PropertyMap.TryFind(System.String,ic4.Property@)"/></item>
                                <item><see cref="P:ic4.PropCategory.Features"/></item>
                                <item><see cref="P:ic4.PropertyMap.All"/></item>
                                <item><see cref="P:ic4.Property.SelectedProperties"/></item>
                            </list>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:ic4.PropString.MaxLength">
            <summary>
                The maximum length of the string that can be stored in this property
            </summary>
            <value>
                The maximum length of the string that can be stored in this property
            </value>
        </member>
        <member name="P:ic4.PropString.Value">
            <summary>
                <para>
                    The current value of this property
                </para>
                <para>
                    The value is only writable is the property's writability is not restricted.
                    See <see cref="P:ic4.Property.IsLocked" />, <see cref="P:ic4.Property.IsReadonly" />, <see cref="P:ic4.Property.IsAvailable" />.
                </para>
            </summary>
            <value>
                The current value of this property
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.QueueSink">
            <summary>
                A sink implementation that allows a program to process all images received from a video capture device
            </summary>
            <remarks>
                <para>
                    A queue sink manages a number of buffers that are organized in two queues:
                    <list type="bullet">
                        <item>
                            A free queue that buffers are pulled from to fill with data from the device
                        </item>
                        <item>
                            An output queue that contains the filled buffers ready to be picked up by the program
                        </item>
                    </list>
                </para>
                <para>
                    To create a queue sink, use one of its constructors
                    (<see cref="M:ic4.QueueSink.#ctor(ic4.PixelFormat,ic4.IBufferAllocator,System.Int32)"/> or
                    <see cref="M:ic4.QueueSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.IBufferAllocator,System.Int32)"/>).
                </para>
                <para>
                    Pass the sink to <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/> or <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.StreamSetupOption)"/>
                    to feed images into the sink.
                </para>
                <para>
                    Usually, the sink is interacted with by registering handlers for the sink's events.
                    The Events are raised at different significant points in the lifetime of a queue sink:
                    <list type="bullet">
                        <item>
                            <see cref="E:ic4.QueueSink.SinkConnected"/> occurs when a data stream is being set up from the device to the sink.
                            The event handler is responsible for making sure there are enough buffers queued for streaming to begin.
                        </item>
                        <item>
                            <see cref="E:ic4.QueueSink.FramesQueued"/> occurs whenever there are images available in the output queue.
                        </item>
                        <item>
                            <see cref="E:ic4.QueueSink.SinkDisconnected"/> occurs when a previously-created data stream is stopped.
                        </item>
                    </list>
                </para>
                <para>
                    To retrieve the oldest available image from the output queue, call <see cref="M:ic4.QueueSink.PopOutputBuffer"/>
                    or <see cref="M:ic4.QueueSink.TryPopOutputBuffer(ic4.ImageBuffer@)"/>.
                    The returned image buffer is owned by the program. If the program no longer needs the image buffer,
                    <see cref="M:ic4.HandleObject.Dispose"/> must be called it to return the image buffer to the sink's free queue.
                </para>
                <para>
                    A program does not necessarily have to requeue all image buffers immediately; it can choose keep references to the a number of them
                    in its own data structures. However, please note that if there are no buffers in the free queue when the device tries to deliver a frame,
                    the frame will be dropped. Use <see cref="P:ic4.Grabber.StreamStatistics"/> to find out whether a buffer underrun occurred.
                </para>
            </remarks>
        </member>
        <member name="E:ic4.QueueSink.SinkConnected">
            <summary>
                Occurs when the data stream to the sink is created
            </summary>
            <remarks>
                <para>
                    The event handler can abort the creation of the data stream by setting <see cref="P:ic4.QueueSinkConnectedEventArgs.AbortConnect"/>
                    to <c>true</c>.
                </para>
                <para>
                    <see cref="P:ic4.QueueSinkConnectedEventArgs.MinBuffersRequired"/> indicates the minimum number of buffers
                    required for the data stream to operate. If the event handler does not allocate any buffers, the sink will automatically
                    allocate the minimum number of buffers required.
                </para>
                <para>
                    The function is executed on the thread that calls <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.StreamSetupOption)"/>.
                </para>
            </remarks>
        </member>
        <member name="E:ic4.QueueSink.FramesQueued">
            <summary>
                Occurs when new images were added to the sink's queue of filled buffers.
            </summary>
            <remarks>
                <para>
                    The event handler usually calls <see cref="M:ic4.QueueSink.PopOutputBuffer"/> to get access to the filled image buffers.
                </para>
                <para>
                    If this callback function performs a lengthy operation, it is recommended to regularly check <see cref="P:ic4.QueueSink.IsCancelRequested"/>
                    to determine whether the data stream is being stopped.
                </para>
                <para>
                    The function is executed on dedicated thread managed by the sink.
                </para>
                <para>
                    When the data stream to the sink is stopped, the <see cref="M:ic4.Grabber.StreamStop"/> call will wait until
                    this event handler returns. This can quickly lead to a deadlock, if code in the event handler performs an operation
                    that unconditionally requires activity on the thread that called <see cref="M:ic4.Grabber.StreamStop"/>.
                </para>
            </remarks>
        </member>
        <member name="E:ic4.QueueSink.SinkDisconnected">
            <summary>
                Occurs when the data stream to the sink is stopped.
            </summary>
            <remarks>
                <para>
                    The function is executed on the thread that calls <see cref="M:ic4.Grabber.StreamStop"/>.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.QueueSink.Type">
            <summary>
                <para>
                    The type of the sink.
                </para>
                <para>
                    For queue sinks, this always is <see cref="F:ic4.SinkType.QueueSink"/>.
                </para>
            </summary>
            <value>
                The type of the sink.
            </value>
        </member>
        <member name="M:ic4.QueueSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.IBufferAllocator,System.Int32)">
            <summary>
                Creates a new queue sink.
            </summary>
            <param name="acceptedPixelFormats">
                <para>
                    An optional list of pixel formats that restrict the input to this sink.
                </para>
                <para>
                    This can be used to force an automatic conversion from the device's pixel format to a pixel format
                    usable by the sink.
                </para>
            </param>
            <param name="customAllocator">
                <para>
                    An optional custom buffer allocator
                </para>
            </param>
            <param name="maxOutputBuffers">
                <para>
                    Defines the maximum number of buffers that are stored in the sink's output queue.
                </para>
                <para>
                    If set to 0, the number of buffers is unlimited.
                </para>
                <para>
                    If a new frame arrives at the sink, and the output queue size would exceed this number,
                    the oldest image is discarded and its buffer is added to the free queue.
                </para>
            </param>
            <exception cref="T:System.ArgumentException">
                <c>maxOutputBuffers</c> is less than<c>0</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.QueueSink.#ctor(ic4.PixelFormat,ic4.IBufferAllocator,System.Int32)">
            <summary>
                Creates a new queue sink.
            </summary>
            <param name="acceptedPixelFormat">
                <para>
                    A pixel format that restricts the input to this sink.
                </para>
                <para>
                    This can be used to force an automatic conversion from the device's pixel format to a pixel format
                    usable by the sink.
                </para>
            </param>
            <param name="customAllocator">
                <para>
                    An optional custom buffer allocator
                </para>
            </param>
            <param name="maxOutputBuffers">
                <para>
                    Defines the maximum number of buffers that are stored in the sink's output queue.
                </para>
                <para>
                    If set to 0, the number of buffers is unlimited.
                </para>
                <para>
                    If a new frame arrives at the sink, and the output queue size would exceed this number,
                    the oldest image is discarded and its buffer is added to the free queue.
                </para>
            </param>
            <exception cref="T:System.ArgumentException">
                <c>maxOutputBuffers</c> is less than<c>0</c>
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.QueueSink.AllocAndQueueBuffers(System.Int32)">
            <summary>
                Allocates a number of buffers matching the sink's image type and puts them into the free queue.
            </summary>
            <param name="count">
                Number of buffers to allocate
            </param>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.QueueSink.PopOutputBuffer">
            <summary>
                <para>
                    Retrieves a buffer that was filled with image data from the sink's output queue.
                </para>
            </summary>
            <returns>
                A filled image buffer
            </returns>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    This operation is only valid while the sink is connected to a device in a data stream.
                </para>
                <para>
                    The buffers are retrieved in order they were received from the video capture device; the oldest image is returned first.
                </para>
                <para>
                    After a successfull call, the program owns the image buffer through the <see cref="T:ic4.ImageBuffer" /> reference.
                    The image buffer object must be disposed to put the image buffer into the sink's free queue for later reuse.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.QueueSink.TryPopOutputBuffer(ic4.ImageBuffer@)">
            <summary>
                <para>
                    Tries to retrieve a buffer that was filled with image data from the sink's output queue.
                </para>
                <para>
                    In contrast to <see cref="M:ic4.QueueSink.PopOutputBuffer"/>, this function does not throw an exception
                    in case of an error.
                </para>
            </summary>
            <param name="buffer">
                Output parameter receiving the image buffer reference on success
            </param>
            <returns>
                <c>true</c>, if a filled image buffer was retrieved, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    This operation is only valid while the sink is connected to a device in a data stream.
                </para>
                <para>
                    The buffers are retrieved in order they were received from the video capture device; the oldest image is returned first.
                </para>
                <para>
                    After a successfull call, the program owns the image buffer through the <see cref="T:ic4.ImageBuffer"/> reference.
                    The image buffer object must be disposed to put the image buffer into the sink's free queue for later reuse.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.QueueSink.IsCancelRequested">
            <summary>
                Indicates whether the data stream this sink is connected to is in the process of being stopped.
            </summary>
            <value>
                <c>true</c>, if the data stream to this sink is in the process of being stopped, otherwise <c>false</c>.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.QueueSink.QueueSizes">
            <summary>
                The lengths of the queues in the sink
            </summary>
            <value>
                A structure containing information about the sink's current queue sizes.
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.QueueSink.OutputImageType">
            <summary>
                The image type of the images the sink is configured to receive
            </summary>
            <value>
                The image type of the images the sink is configured to receive
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="T:ic4.QueueSinkConnectedEventArgs">
            <summary>
                Provides data for the <see cref="E:ic4.QueueSink.SinkConnected"/> event.
            </summary>
        </member>
        <member name="P:ic4.QueueSinkConnectedEventArgs.Sink">
            <summary>
                The sink that raised the event
            </summary>
            <value>
                The sink that raised the event
            </value>
        </member>
        <member name="P:ic4.QueueSinkConnectedEventArgs.ImageType">
            <summary>
                The image type the sink is going to receive
            </summary>
            <value>
                The image type the sink is going to receive
            </value>
        </member>
        <member name="P:ic4.QueueSinkConnectedEventArgs.MinBuffersRequired">
            <summary>
                Minimum number of buffers required by the data stream to operate
            </summary>
            <value>
                Minimum number of buffers required by the data stream to operate
            </value>
            <remarks>
                If the event handler does not allocate any buffers, the sink will automatically allocate the minimum number of buffers required.
            </remarks>
        </member>
        <member name="P:ic4.QueueSinkConnectedEventArgs.AbortConnect">
            <summary>
                Gets or sets a value indicating whether the data stream setup should be aborted.
            </summary>
            <value>
                <c>true</c>, if the data stream setup should be aborted, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:ic4.QueueSinkEventArgs">
            <summary>
                Provides data for the <see cref="E:ic4.QueueSink.FramesQueued"/> and <see cref="E:ic4.QueueSink.SinkDisconnected"/> events.
            </summary>
        </member>
        <member name="P:ic4.QueueSinkEventArgs.Sink">
            <summary>
                The sink that raised the event
            </summary>
            <value>
                The sink that raised the event
            </value>
        </member>
        <member name="T:ic4.QueueSinkQueueSizes">
            <summary>
                Contains information about the current queue lengths inside the queue sink
            </summary>
        </member>
        <member name="P:ic4.QueueSinkQueueSizes.FreeQueueLength">
            <summary>
                Number of image buffers in the free queue
            </summary>
            <value>
                Number of image buffers in the free queue
            </value>
        </member>
        <member name="P:ic4.QueueSinkQueueSizes.OutputQueueLength">
            <summary>
                Number of filled image buffers in the output queue
            </summary>
            <value>
                Number of filled image buffers in the output queue
            </value>
        </member>
        <member name="T:ic4.Sink">
            <summary>
                Abstract base class for sinks.
            </summary>
            <remarks>
                <para>
                    Sink objects provide programmatic access to the image data acquired from video capture devices.
                </para>
                <para>
                    There are multiple sink types available:
                    <list type="bullet">
                        <item>
                            A <see cref="T:ic4.QueueSink"/> is recommended when a program needs to process all or most images received from the device.
                        </item>
                        <item>
                            A <see cref="T:ic4.SnapSink"/> can be used to capture images or short image sequences on demand.
                        </item>
                    </list>
                </para>
                <para>
                    To create a sink object, use its constructor, e.g. <see cref="M:ic4.QueueSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.IBufferAllocator,System.Int32)"/>
                    or <see cref="M:ic4.SnapSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.SnapSinkAllocationStrategy,ic4.IBufferAllocator)"/>.
                </para>
                <para>
                    A sink is connected to a video capture device using <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/>
                    or one of its overloads.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.Sink.IsAttached">
            <summary>
                Indicates whether a sink is currently attached to a <see cref="T:ic4.Grabber"/> as part of a data stream.
            </summary>
            <value>
                <c>true</c>, if the sink is attached to a <see cref="T:ic4.Grabber"/> as part of a data stream, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ic4.Sink.Type">
            <summary>
                The type of the sink
            </summary>
            <value>
                The type of the sink
            </value>
        </member>
        <member name="P:ic4.Sink.Mode">
            <summary>
                <para>
                    Gets or sets the sink mode.
                </para>
                <para>
                    The sink mode can be used to temporarily suspend sink operation.
                </para>
                <para>
                    Sinks are set to <see cref="F:ic4.SinkMode.Run"/> by default.
                </para>
            </summary>
            <value>
                <list type="table">
                    <listheader>
                        <term>Sink Mode</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term><see cref="F:ic4.SinkMode.Run"/></term>
                        <description>Normal operation</description>
                    </item>
                    <item>
                        <term><see cref="F:ic4.SinkMode.Pause"/></term>
                        <description>Pause operation. The sink will ignore all incoming frames.</description>
                    </item>
                </list>
            </value>
        </member>
        <member name="T:ic4.SinkMode">
            <summary>
                Defines the possible sink modes.
            </summary>
        </member>
        <member name="F:ic4.SinkMode.Run">
            <summary>
                Normal operation
            </summary>
        </member>
        <member name="F:ic4.SinkMode.Pause">
            <summary>
                Pause operation. The sink will ignore all incoming frames.
            </summary>
        </member>
        <member name="T:ic4.SinkType">
            <summary>
                Defines the possible sink types.
            </summary>
            <remarks>
                To determine the type of a sink, check <see cref="P:ic4.Sink.Type"/>
            </remarks>
        </member>
        <member name="F:ic4.SinkType.SnapSink">
            <summary>
                The sink is a <see cref="F:ic4.SinkType.SnapSink"/>.
            </summary>
        </member>
        <member name="F:ic4.SinkType.QueueSink">
            <summary>
                The sink is a <see cref="F:ic4.SinkType.QueueSink"/>
            </summary>
        </member>
        <member name="T:ic4.SnapSink">
            <summary>
                The snap sink is a sink implementation that allows a program to capture single images or sequences of images on demand,
                while still having a display showing all images.
            </summary>
            <remarks>
                <para>
                    To create a snap sink, use <see cref="M:ic4.SnapSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.SnapSinkAllocationStrategy,ic4.IBufferAllocator)"/>.
                </para>
                <para>
                    Pass the sink to <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.IDisplay,ic4.StreamSetupOption)"/> or <see cref="M:ic4.Grabber.StreamSetup(ic4.Sink,ic4.StreamSetupOption)"/>
                    to feed images into the sink.
                </para>
                <para>
                    To grab a single image out of the stream, call <see cref="M:ic4.SnapSink.SnapSingle(System.TimeSpan)"/>. To grab a sequence of images, call
                    <see cref="M:ic4.SnapSink.SnapSequence(System.Int32,System.TimeSpan)"/>.
                </para>
                <para>
                    The snap sink manages the buffers used for background image aquisition as well as for the grabbed images.
                    During stream setup, a number of buffers is allocated depending on the configured allocation strategy.
                    Additional buffers can be automatically created on demand, if the allocation strategy allows.
                    Likewise, if there is a surplus of unused image buffers, unused buffers are reclaimed and released automatically.
                </para>
                <para>
                    Image buffers that were returned by one of the snap functions are owned by their respective caller through
                    the reference to the <see cref="T:ic4.ImageBuffer"/>.
                    To return the image buffer to the sink for reuse, call <see cref="M:ic4.HandleObject.Dispose"/> on the image buffer.
                </para>
                <para>
                    Please note that if there are no buffers available in the sink when the device tries to deliver a frame,
                    the frame will be dropped. Use <see cref="P:ic4.Grabber.StreamStatistics"/> to find out whether a buffer underrun occurred.
                </para>
                <para>
                    By default, the sink uses buffers provided by the device driver or the implicitly created transformation filter.
                    It is possible to use program-defined buffers be used by providing a <see cref="T:ic4.IBufferAllocator"/> to the sink constructor.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.SnapSink.Type">
            <summary>
                <para>
                    The type of the sink.
                </para>
                <para>
                    For snap sinks, this always is <see cref="F:ic4.SinkType.SnapSink"/>.
                </para>
            </summary>
            <value>
                The type of the sink.
            </value>
        </member>
        <member name="M:ic4.SnapSink.#ctor(System.Collections.Generic.IEnumerable{ic4.PixelFormat},ic4.SnapSinkAllocationStrategy,ic4.IBufferAllocator)">
            <summary>
                Creates a new snap sink.
            </summary>
            <param name="acceptedPixelFormats">
                <para>
                    An optional list of pixel formats that restrict the input to this sink.
                </para>
                <para>
                    This can be used to force an automatic conversion from the device's pixel format to a pixel format
                    usable by the sink.
                </para>
            </param>
            <param name="strategy">
                <para>
                    An optional buffer allocation strategy for the sink.
                </para>
                <para>
                    If this is <c>null</c>, a default allocation strategy is used.
                </para>
            </param>
            <param name="customAllocator">
                <para>
                    An optional custom buffer allocator
                </para>
            </param>
            <exception cref="T:System.ArgumentException">
                The buffer allocation strategy is invalid.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.SnapSink.#ctor(ic4.PixelFormat,ic4.SnapSinkAllocationStrategy,ic4.IBufferAllocator)">
            <summary>
                Creates a new snap sink.
            </summary>
            <param name="acceptedPixelFormat">
                <para>
                    A pixel format that restricts the input to this sink.
                </para>
                <para>
                    This can be used to force an automatic conversion from the device's pixel format to a pixel format
                    usable by the sink.
                </para>
            </param>
            <param name="strategy">
                <para>
                    An optional buffer allocation strategy for the sink.
                </para>
                <para>
                    If this is <c>null</c>, a default allocation strategy is used.
                </para>
            </param>
            <param name="customAllocator">
                <para>
                    An optional custom buffer allocator
                </para>
            </param>
            <exception cref="T:System.ArgumentException">
                The buffer allocation strategy is invalid.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="P:ic4.SnapSink.OutputImageType">
            <summary>
                The image type of the images the sink is configured to receive
            </summary>
            <value>
                The image type of the images the sink is configured to receive
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.SnapSink.SnapSingle(System.TimeSpan)">
            <summary>
                Grabs a single image out of the video stream received from the video capture device.
            </summary>
            <param name="timeout">Time to wait for a new image to arrive</param>
            <returns>
                A filled image buffer
            </returns>
            <exception cref="T:System.TimeoutException">
                No image was received before the timeout elapsed.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    This operation is only valid while the sink is connected to a device in a data stream.
                </para>
                <para>
                    After a successfull call, the program owns the image buffer through the <see cref="T:ic4.ImageBuffer" /> reference.
                    The image buffer object must be disposed to put the image buffer into the sink's free queue for later reuse.
                </para>
                <para>
                    If the image buffer object is not disposed, their finalizer will also return the image buffer to the sink.
                    However, it is recommended to always manually dispose the image buffer for deterministic behavior.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.SnapSink.TrySnapSingle(ic4.ImageBuffer@,System.TimeSpan)">
            <summary>
                <para>
                    Tries to grab a single image out of the video stream received from the video capture device.
                </para>
                <para>
                    In contrast to <see cref="M:ic4.SnapSink.SnapSingle(System.TimeSpan)"/>, this function does not throw an exception
                    in case of an error.
                </para>
            </summary>
            <param name="buffer">Output parameter receiving the grabber image buffer</param>
            <param name="timeout">Time to wait for a new image to arrive</param>
            <returns>
                <c>true</c>, if a buffer was grabbed successfully, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    This operation is only valid while the sink is connected to a device in a data stream.
                </para>
                <para>
                    After a successfull call, the program owns the image buffer through the <see cref="T:ic4.ImageBuffer"/> reference.
                    The image buffer object must be disposed to put the image buffer into the sink's free queue for later reuse.
                </para>
                <para>
                    If the image buffer object is not disposed, their finalizer will also return the image buffer to the sink.
                    However, it is recommended to always manually dispose the image buffer for deterministic behavior.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.SnapSink.SnapSequence(System.Int32,System.TimeSpan)">
            <summary>
                Grabs a sequence of images out of the video stream received from the video capture device.
            </summary>
            <param name="count">Number of images to grab</param>
            <param name="timeout">Time to wait for all images to arrive</param>
            <returns>
                <para>
                    The list of grabbed images.
                </para>
                <para>
                    If the timeout expires, the returned list contains the images grabbed until then.
                </para>
            </returns>
            <exception cref="T:System.TimeoutException">
                No images were received before the timeout elapsed.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    This operation is only valid while the sink is connected to a device in a data stream.
                </para>
                <para>
                    After a successfull call, the program owns the image buffers through the <see cref="T:ic4.ImageBuffer" /> references.
                    The image buffer objects must be disposed to put the image buffer into the sink's free queue for later reuse.
                </para>
                <para>
                    If the image buffer objects are not disposed, their finalizer will also return the image buffers to the sink.
                    However, it is recommended to always manually dispose the image buffers for deterministic behavior.
                </para>
            </remarks>
        </member>
        <member name="T:ic4.SnapSinkAllocationStrategy">
            <summary>
                The <see cref="T:ic4.SnapSink"/> buffer allocation strategy defines how many buffers are pre-allocated, when additional buffers are created,
                and when excess buffers are reclaimed.
            </summary>
        </member>
        <member name="P:ic4.SnapSinkAllocationStrategy.NumBuffersToAllocateOnConnect">
            <summary>
                Defines the number of buffers to auto-allocate when the stream is set up.
            </summary>
            <value>
                The number of buffers to auto-allocate when the stream is set up
            </value>
        </member>
        <member name="P:ic4.SnapSinkAllocationStrategy.NumBuffersAllocationThreshold">
            <summary>
                <para>
                    Defines the minimum number of required free buffers.
                </para>
                <para>
                    If the number of free buffers falls below this, new buffers are allocated.
                </para>
            </summary>
            <value>
                <para>
                    The minimum number of required free buffers.
                </para>
            </value>
        </member>
        <member name="P:ic4.SnapSinkAllocationStrategy.NumBuffersFreeThreshold">
            <summary>
                <para>
                    Defines the maximum number of free buffers
                </para>
                <para>
                    If the number of free buffers grows above this, buffers are freed.
                </para>
                <para>
                    If set to <c>0</c>, buffers are not freed automatically.
                </para>
            </summary>
            <value>
                The maximum number of free buffers
            </value>
            <remarks>
                If <c>NumBuffersFreeThreshold</c> is not <c>0</c>, it must be larger than <see cref="P:ic4.SnapSinkAllocationStrategy.NumBuffersAllocationThreshold"/> + <c>2</c>.
            </remarks>
        </member>
        <member name="P:ic4.SnapSinkAllocationStrategy.NumBuffersMax">
            <summary>
                <para>
                    Defines the maximum total number of buffers this sink will allocate.
                </para>
                <para>
                    This includes both free buffers managed by the sink and filled buffers owned by the program.
                </para>
            </summary>
            <value>
                The maximum total number of buffers this sink will allocate
            </value>
            <remarks>
                If set to <c>0</c>, there is no limit to the total number of buffers.
            </remarks>
        </member>
        <member name="T:ic4.StreamStatistics">
            <summary>
                Contains statistics counters that can be used to analyze the stream behavior and identify possible bottlenecks.
            </summary>
            <remarks>
                To obtain stream statistics, use <see cref="P:ic4.Grabber.StreamStatistics"/>.
            </remarks>
        </member>
        <member name="P:ic4.StreamStatistics.DeviceDelivered">
            <summary>
                Number of frames delivered by the device
            </summary>
            <value>
                Number of frames delivered by the device
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.DeviceTransmissionError">
            <summary>
                Number of frames dropped because of transmission errors, e.g. unrecoverable packet loss
            </summary>
            <value>
                Number of frames dropped because of transmission errors, e.g. unrecoverable packet loss
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.DeviceUnderrun">
            <summary>
                Number of frames dropped by the device driver, because there was no free image buffer available
            </summary>
            <value>
                Number of frames dropped by the device driver, because there was no free image buffer available
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.TransformDelivered">
            <summary>
                Number of frames delivered by the transform element
            </summary>
            <value>
                Number of frames delivered by the transform element
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.TransformUnderrun">
            <summary>
                Number of frames dropped by the transform element, because there was no free image buffer available
            </summary>
            <value>
                Number of frames dropped by the transform element, because there was no free image buffer available
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.SinkDelivered">
            <summary>
                Number of frames processed by the sink
            </summary>
            <value>
                Number of frames processed by the sink
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.SinkUnderrun">
            <summary>
                Number of frames dropped by the sink, because there was no free image buffer available
            </summary>
            <value>
                Number of frames dropped by the sink, because there was no free image buffer available
            </value>
        </member>
        <member name="P:ic4.StreamStatistics.SinkIgnored">
            <summary>
                Number of frames ignored by the sink, because the sink was disabled or not instructed to process the data
            </summary>
            <value>
                Number of frames ignored by the sink, because the sink was disabled or not instructed to process the data
            </value>
        </member>
        <member name="T:ic4.TransportLayerType">
            <summary>
                Defines the possible transport layer types.
            </summary>
        </member>
        <member name="F:ic4.TransportLayerType.Unknown">
            <summary>
                Other or unknown transport layer type
            </summary>
        </member>
        <member name="F:ic4.TransportLayerType.GigEVision">
            <summary>
                The transport layer uses the GigEVision standard.
            </summary>
        </member>
        <member name="F:ic4.TransportLayerType.USB3Vision">
            <summary>
                The transport layer uses the USB3 Vision standard.
            </summary>
        </member>
        <member name="T:ic4.VideoWriterType">
            <summary>
                Defines the available video writer types
            </summary>
        </member>
        <member name="F:ic4.VideoWriterType.MP4_H264">
            <summary>
                Create MP4 files with H.264 encoding
            </summary>
        </member>
        <member name="F:ic4.VideoWriterType.MP4_H265">
            <summary>
                Create MP4 files with H.265/HEVC encoding
            </summary>
        </member>
        <member name="T:ic4.VideoWriter">
            <summary>
                Represents a video writer
            </summary>
            <remarks>
                <para>
                    To create a video writer, use the <see cref="M:ic4.VideoWriter.#ctor(ic4.VideoWriterType)"/> constructor, passing the type of
                    the desired video file.
                </para>
                <para>
                    After creating the video writer, call <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)"/> to start writing a
                    new video file. Call <see cref="M:ic4.VideoWriter.AddFrame(ic4.ImageBuffer)"/> to add images to the video file.
                    To complete the recording, call <see cref="M:ic4.VideoWriter.FinishFile"/>.
                </para>
                <para>
                    Use <see cref="P:ic4.VideoWriter.PropertyMap"/> to access encoder configuration options.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.VideoWriter.#ctor(ic4.VideoWriterType)">
            <summary>
                Creates a new video writer.
            </summary>
            <param name="type">
                The type of video file to create a writer for
            </param>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)">
            <summary>
                Opens a new video file ready to write images into.
            </summary>
            <param name="fileName">
                Name of the new video file
            </param>
            <param name="imageType">
                Image type of the images that are going to be written
            </param>
            <param name="frameRate">
                Playback frame rate of the video file
            </param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException">
                BeginFile was already called without a matching call to <see cref="M:ic4.VideoWriter.FinishFile" />.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.VideoWriter.FinishFile">
            <summary>
                Finishes writing a video file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> was not called.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
        <member name="M:ic4.VideoWriter.AddFrame(ic4.ImageBuffer)">
            <summary>
                Adds an image to the currently open video file.
            </summary>
            <param name="buffer">
                Image buffer to be added to the video file
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>buffer</c> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> was not called.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> must be called before adding images to the video file.
                </para>
                <para>
                    The image buffer's <see cref="P:ic4.ImageBuffer.ImageType" /> must be equal to the <c>imageType</c> parameter
                    passed to <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> when starting the file.
                </para>
                <para>
                    The video writer can retain a reference to the image buffer. This can delay the release and possible
                    reuse of the image buffer. In this case, the buffer becomes shared, and is no longer safely writable
                    (<see cref="P:ic4.ImageBuffer.IsWritable" />). Use <see cref="M:ic4.VideoWriter.AddFrameCopy(ic4.ImageBuffer)" /> to always let the
                    video writer immediately copy the data out of the image buffer.
                </para>
            </remarks>
        </member>
        <member name="M:ic4.VideoWriter.AddFrameCopy(ic4.ImageBuffer)">
            <summary>
                Adds an image to the currently open video file, copying the image data in the process.
            </summary>
            <param name="buffer">
                Image buffer to be added to the video file
            </param>
            <exception cref="T:System.ArgumentNullException">
                <c>buffer</c> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> was not called.
            </exception>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
            <remarks>
                <para>
                    <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> must be called before adding images to the video file.
                </para>
                <para>
                    The image buffer's <see cref="P:ic4.ImageBuffer.ImageType" /> must be equal to the <c>imageType</c> parameter
                    passed to <see cref="M:ic4.VideoWriter.BeginFile(System.String,ic4.ImageType,System.Double)" /> when starting the file.
                </para>
                <para>
                    The image buffer's contents will be copied, so that the buffer's reference count is not increased
                    and it can be reused immedietely if the final reference is released.
                    Use <see cref="M:ic4.VideoWriter.AddFrame(ic4.ImageBuffer)" /> to avoid the copy operation if it is not necessary.
                </para>
            </remarks>
        </member>
        <member name="P:ic4.VideoWriter.PropertyMap">
            <summary>
                <para>
                    The video writer's property map for encoder configuration
                </para>
            </summary>
            <value>
                The video writer's property map
            </value>
            <exception cref="T:ic4.IC4Exception">
      Check <see cref="P:ic4.IC4Exception.ErrorCode" /> and <see cref="M:System.Exception.ToString" /> for details.
    </exception>
        </member>
    </members>
</doc>
